#![allow(non_snake_case, non_upper_case_globals, non_camel_case_types, clippy::all)]
#[doc(hidden)]
#[repr(transparent)]
pub struct IAlphaMaskEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAlphaMaskEffect {
    type Vtable = IAlphaMaskEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IAlphaMaskEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x9ba6607e_75c9_5388_892f_dd3440564d98,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAlphaMaskEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub AlphaMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    AlphaMask: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetAlphaMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetAlphaMask: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAlphaMaskEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAlphaMaskEffectStatics {
    type Vtable = IAlphaMaskEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IAlphaMaskEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xcc31105c_0377_5708_8484_1ad8ee3e554b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAlphaMaskEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IArithmeticCompositeEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IArithmeticCompositeEffect {
    type Vtable = IArithmeticCompositeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IArithmeticCompositeEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xbeeb682b_d64c_5c8b_a1fb_332162ed099c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IArithmeticCompositeEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub MultiplyAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMultiplyAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Source1Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSource1Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Source2Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSource2Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source1: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource1: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source2: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource2: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IAtlasEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IAtlasEffect {
    type Vtable = IAtlasEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IAtlasEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xf7f26eba_f015_5eff_9af3_7bd2d44904bd,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IAtlasEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation")]
    pub SourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SourceRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub SetSourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SetSourceRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub PaddingRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    PaddingRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub SetPaddingRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SetPaddingRectangle: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBlendEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBlendEffect {
    type Vtable = IBlendEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IBlendEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x5673248e_7266_5e49_b2ab_2589d5d875c3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlendEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut BlendEffectMode,
    ) -> ::windows::core::HRESULT,
    pub SetMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: BlendEffectMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Background: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Background: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetBackground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetBackground: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Foreground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Foreground: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetForeground: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetForeground: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBorderEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBorderEffect {
    type Vtable = IBorderEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IBorderEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x31602441_15db_5b4a_98dd_ba4247548b41,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBorderEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ExtendX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasEdgeBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetExtendX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasEdgeBehavior,
    ) -> ::windows::core::HRESULT,
    pub ExtendY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasEdgeBehavior,
    ) -> ::windows::core::HRESULT,
    pub SetExtendY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasEdgeBehavior,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IBrightnessEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IBrightnessEffect {
    type Vtable = IBrightnessEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IBrightnessEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xbeced347_025f_5727_8f7d_498d67df557e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IBrightnessEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub WhitePoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    WhitePoint: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetWhitePoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetWhitePoint: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub BlackPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    BlackPoint: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetBlackPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetBlackPoint: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ICanvasEffect(::windows::core::IUnknown);
impl ICanvasEffect {
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
::windows::core::interface_hierarchy!(
    ICanvasEffect, ::windows::core::IUnknown, ::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ICanvasEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ICanvasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ICanvasEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ICanvasEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ICanvasEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ICanvasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ICanvasEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ICanvasEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ICanvasEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ICanvasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ICanvasEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ICanvasEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ICanvasEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ICanvasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ICanvasEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ICanvasEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ICanvasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::clone::Clone for ICanvasEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICanvasEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICanvasEffect {}
impl ::core::fmt::Debug for ICanvasEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICanvasEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ICanvasEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"{0ef96f8c-9b5e-4bf0-a399-aad8ce53db55}",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ICanvasEffect {
    type Vtable = ICanvasEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ICanvasEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x0ef96f8c_9b5e_4bf0_a399_aad8ce53db55,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICanvasEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CacheOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetCacheOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation")]
    pub BufferPrecision: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    BufferPrecision: usize,
    #[cfg(feature = "Foundation")]
    pub SetBufferPrecision: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SetBufferPrecision: usize,
    #[cfg(feature = "Foundation")]
    pub InvalidateSourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resourcecreator: *mut ::core::ffi::c_void,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    InvalidateSourceRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub GetInvalidRectangles: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resourcecreator: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    GetInvalidRectangles: usize,
    #[cfg(feature = "Foundation")]
    pub GetRequiredSourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resourcecreator: *mut ::core::ffi::c_void,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: *mut ::core::ffi::c_void,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    GetRequiredSourceRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub GetRequiredSourceRectangles: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resourcecreator: *mut ::core::ffi::c_void,
        outputrectangle: ::windows::Foundation::Rect,
        sourceEffects_array_size: u32,
        sourceeffects: *const *mut ::core::ffi::c_void,
        sourceIndices_array_size: u32,
        sourceindices: *const u32,
        sourceBounds_array_size: u32,
        sourcebounds: *const ::windows::Foundation::Rect,
        result_size__: *mut u32,
        result__: *mut *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    GetRequiredSourceRectangles: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IChromaKeyEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IChromaKeyEffect {
    type Vtable = IChromaKeyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IChromaKeyEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xf14b9464_1871_5eaa_9db6_c0901140e9d3,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IChromaKeyEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI")]
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    Color: usize,
    #[cfg(feature = "UI")]
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetColor: usize,
    pub Tolerance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTolerance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub InvertAlpha: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetInvertAlpha: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub Feather: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetFeather: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub ColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    ColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorManagementEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorManagementEffect {
    type Vtable = IColorManagementEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorManagementEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x6e8bbe37_e1e4_5ad0_b98d_940e3213a54e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorManagementEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SourceColorProfile: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetSourceColorProfile: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SourceRenderingIntent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ColorManagementRenderingIntent,
    ) -> ::windows::core::HRESULT,
    pub SetSourceRenderingIntent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ColorManagementRenderingIntent,
    ) -> ::windows::core::HRESULT,
    pub OutputColorProfile: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetOutputColorProfile: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub OutputRenderingIntent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ColorManagementRenderingIntent,
    ) -> ::windows::core::HRESULT,
    pub SetOutputRenderingIntent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ColorManagementRenderingIntent,
    ) -> ::windows::core::HRESULT,
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub Quality: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ColorManagementEffectQuality,
    ) -> ::windows::core::HRESULT,
    pub SetQuality: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ColorManagementEffectQuality,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorManagementEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorManagementEffectStatics {
    type Vtable = IColorManagementEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorManagementEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x31c7af98_f2d4_55fc_b129_a70736e6da05,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorManagementEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsBestQualitySupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        device: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorManagementProfile(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorManagementProfile {
    type Vtable = IColorManagementProfile_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorManagementProfile {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x5123a56b_b199_47ab_aebe_d308044423fe,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorManagementProfile_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasColorSpace,
    ) -> ::windows::core::HRESULT,
    pub IccProfile: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut u8,
    ) -> ::windows::core::HRESULT,
    pub Type: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ColorManagementProfileType,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub SimpleProfile: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SimpleProfile: usize,
    pub ExtendedColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ExtendedColorSpace,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorManagementProfileFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorManagementProfileFactory {
    type Vtable = IColorManagementProfileFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorManagementProfileFactory {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7a0f1c98_94c6_4621_9877_c51a17823edf,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorManagementProfileFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        colorspace: super::CanvasColorSpace,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorManagementProfileStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorManagementProfileStatics {
    type Vtable = IColorManagementProfileStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorManagementProfileStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x94eef610_03bd_4e82_9479_62a616be75f1,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorManagementProfileStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CreateCustom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        iccProfile_array_size: u32,
        iccprofile: *const u8,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub CreateSimple: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        simpleprofile: ColorManagementSimpleProfile,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    CreateSimple: usize,
    pub CreateExtended: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        colorspace: ExtendedColorSpace,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        r#type: ColorManagementProfileType,
        device: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorMatrixEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorMatrixEffect {
    type Vtable = IColorMatrixEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorMatrixEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xe6ae54c4_883d_588e_b451_e9ebe3830437,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorMatrixEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub ColorMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut Matrix5x4,
    ) -> ::windows::core::HRESULT,
    pub SetColorMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: Matrix5x4,
    ) -> ::windows::core::HRESULT,
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IColorSourceEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IColorSourceEffect {
    type Vtable = IColorSourceEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IColorSourceEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x25f942c7_7fee_518a_ba7b_22a0060af7f6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IColorSourceEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI")]
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    Color: usize,
    #[cfg(feature = "UI")]
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub ColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    ColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetColorHdr: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICompositeEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICompositeEffect {
    type Vtable = ICompositeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ICompositeEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xf8808c48_cdc7_5db4_807c_b9344ff71984,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICompositeEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasComposite,
    ) -> ::windows::core::HRESULT,
    pub SetMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasComposite,
    ) -> ::windows::core::HRESULT,
    #[cfg(all(feature = "Foundation_Collections", feature = "Graphics_Effects"))]
    pub Sources: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(all(feature = "Foundation_Collections", feature = "Graphics_Effects")))]
    Sources: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IContrastEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IContrastEffect {
    type Vtable = IContrastEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IContrastEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xda8a2b9f_594e_560a_9eaa_1f912408fe79,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IContrastEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Contrast: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetContrast: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub ClampSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IConvolveMatrixEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IConvolveMatrixEffect {
    type Vtable = IConvolveMatrixEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IConvolveMatrixEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x82961257_a78d_5440_8026_af57d4a76a9e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IConvolveMatrixEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub KernelScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    KernelScale: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetKernelScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetKernelScale: usize,
    pub InterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub KernelWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetKernelWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub KernelHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetKernelHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub KernelMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetKernelMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub Divisor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDivisor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub KernelOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    KernelOffset: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetKernelOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetKernelOffset: usize,
    pub PreserveAlpha: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetPreserveAlpha: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICropEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICropEffect {
    type Vtable = ICropEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ICropEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xd8a1c2a5_e031_566d_8f7c_ba07cfb58aae,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICropEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation")]
    pub SourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SourceRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub SetSourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SetSourceRectangle: usize,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICrossFadeEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICrossFadeEffect {
    type Vtable = ICrossFadeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ICrossFadeEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xbe161a9f_43d2_5613_8600_d51e3d7ce288,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICrossFadeEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub CrossFade: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetCrossFade: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source2: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource2: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source1: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource1: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ICrossFadeEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ICrossFadeEffectStatics {
    type Vtable = ICrossFadeEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ICrossFadeEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xa3b67330_6284_5ef6_99e8_b4b05d2b8bfc,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ICrossFadeEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDirectionalBlurEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDirectionalBlurEffect {
    type Vtable = IDirectionalBlurEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IDirectionalBlurEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x5d155c4b_0882_506a_a8e1_12e1ead17f0a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDirectionalBlurEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Angle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Optimization: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectOptimization,
    ) -> ::windows::core::HRESULT,
    pub SetOptimization: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectOptimization,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDiscreteTransferEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDiscreteTransferEffect {
    type Vtable = IDiscreteTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IDiscreteTransferEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7f1f54f9_21b5_5b91_9506_832c536fddfa,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDiscreteTransferEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub RedTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub RedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetRedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub GreenTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub GreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetGreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub BlueTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub BlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetBlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub AlphaTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDisplacementMapEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDisplacementMapEffect {
    type Vtable = IDisplacementMapEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IDisplacementMapEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x45f57c50_d4d9_5af1_8a6b_50378f3498a2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDisplacementMapEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub XChannelSelect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectChannelSelect,
    ) -> ::windows::core::HRESULT,
    pub SetXChannelSelect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectChannelSelect,
    ) -> ::windows::core::HRESULT,
    pub YChannelSelect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectChannelSelect,
    ) -> ::windows::core::HRESULT,
    pub SetYChannelSelect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectChannelSelect,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Displacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Displacement: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetDisplacement: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetDisplacement: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDistantDiffuseEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDistantDiffuseEffect {
    type Vtable = IDistantDiffuseEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IDistantDiffuseEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xd501b10b_b445_50f4_8b8f_cdecfcdd1321,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDistantDiffuseEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Azimuth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAzimuth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Elevation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetElevation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub DiffuseAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDiffuseAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub HeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub LightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    LightColor: usize,
    #[cfg(feature = "UI")]
    pub SetLightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetLightColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub HeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    HeightMapKernelSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetHeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetHeightMapKernelSize: usize,
    pub HeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDistantSpecularEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDistantSpecularEffect {
    type Vtable = IDistantSpecularEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IDistantSpecularEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xa7a828df_3072_545f_8d75_86c100f03231,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDistantSpecularEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Azimuth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAzimuth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Elevation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetElevation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SpecularExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSpecularExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SpecularAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSpecularAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub HeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub LightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    LightColor: usize,
    #[cfg(feature = "UI")]
    pub SetLightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetLightColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub HeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    HeightMapKernelSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetHeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetHeightMapKernelSize: usize,
    pub HeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IDpiCompensationEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IDpiCompensationEffect {
    type Vtable = IDpiCompensationEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IDpiCompensationEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x636597cd_f94a_55b6_9cf0_694a53d638ea,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IDpiCompensationEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub SourceDpi: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SourceDpi: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetSourceDpi: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetSourceDpi: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEdgeDetectionEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEdgeDetectionEffect {
    type Vtable = IEdgeDetectionEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IEdgeDetectionEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x69f6cf3a_f38f_5a88_974a_29390b957e5c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IEdgeDetectionEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EdgeDetectionEffectMode,
    ) -> ::windows::core::HRESULT,
    pub SetMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EdgeDetectionEffectMode,
    ) -> ::windows::core::HRESULT,
    pub OverlayEdges: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetOverlayEdges: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEffectTransferTable3D(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEffectTransferTable3D {
    type Vtable = IEffectTransferTable3D_Vtbl;
}
unsafe impl ::windows::core::Interface for IEffectTransferTable3D {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7af06b86_2c45_49c8_8f44_e15a6d4fa44e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IEffectTransferTable3D_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Device: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEffectTransferTable3DStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEffectTransferTable3DStatics {
    type Vtable = IEffectTransferTable3DStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IEffectTransferTable3DStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x3cb83559_216a_4bca_9bb6_e233c5ad2c48,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IEffectTransferTable3DStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI")]
    pub CreateFromColors: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resourcecreator: *mut ::core::ffi::c_void,
        colors_array_size: u32,
        colors: *const ::windows::UI::Color,
        sizeb: i32,
        sizeg: i32,
        sizer: i32,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    CreateFromColors: usize,
    #[cfg(feature = "Graphics_DirectX")]
    pub CreateFromBytes: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resourcecreator: *mut ::core::ffi::c_void,
        bytes_array_size: u32,
        bytes: *const u8,
        sizeb: i32,
        sizeg: i32,
        sizer: i32,
        format: ::windows::Graphics::DirectX::DirectXPixelFormat,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_DirectX"))]
    CreateFromBytes: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IEmbossEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IEmbossEffect {
    type Vtable = IEmbossEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IEmbossEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x617bff35_481c_5596_aba5_00a162349d7b,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IEmbossEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Angle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IExposureEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IExposureEffect {
    type Vtable = IExposureEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IExposureEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xb9e20a03_2232_5fd3_b408_15784b79dbb0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IExposureEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Exposure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetExposure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGammaTransferEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IGammaTransferEffect {
    type Vtable = IGammaTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IGammaTransferEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xb4576b6b_6c3e_534a_8576_d46df4fce93d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGammaTransferEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub RedAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RedExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RedOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetRedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub GreenAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub GreenExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub GreenOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub GreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetGreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub BlueAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BlueExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BlueOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetBlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub AlphaAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaAmplitude: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGaussianBlurEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IGaussianBlurEffect {
    type Vtable = IGaussianBlurEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IGaussianBlurEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xa82ec394_6734_5830_9123_2c82b27dd3c0,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGaussianBlurEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Optimization: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectOptimization,
    ) -> ::windows::core::HRESULT,
    pub SetOptimization: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectOptimization,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IGrayscaleEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IGrayscaleEffect {
    type Vtable = IGrayscaleEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IGrayscaleEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x78e13b83_0638_53f8_b0b3_5b0b320a9ad2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IGrayscaleEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHdrToneMapEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IHdrToneMapEffect {
    type Vtable = IHdrToneMapEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IHdrToneMapEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x2004faac_663e_5df4_b4cd_a5afbfd9341f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHdrToneMapEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InputMaxLuminance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetInputMaxLuminance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub OutputMaxLuminance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOutputMaxLuminance: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub DisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut HdrToneMapEffectDisplayMode,
    ) -> ::windows::core::HRESULT,
    pub SetDisplayMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: HdrToneMapEffectDisplayMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHdrToneMapEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IHdrToneMapEffectStatics {
    type Vtable = IHdrToneMapEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IHdrToneMapEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x0181f02f_0a7e_55e1_8d2d_42ab99739b27,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHdrToneMapEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHighlightsAndShadowsEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IHighlightsAndShadowsEffect {
    type Vtable = IHighlightsAndShadowsEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IHighlightsAndShadowsEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7f90be14_267e_5088_bc36_2e0aad869b52,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHighlightsAndShadowsEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Highlights: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHighlights: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Shadows: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetShadows: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Clarity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetClarity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub MaskBlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetMaskBlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SourceIsLinearGamma: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetSourceIsLinearGamma: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHueRotationEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IHueRotationEffect {
    type Vtable = IHueRotationEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IHueRotationEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xc172ebf2_e35f_58ae_ad2c_561eceaf2694,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHueRotationEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Angle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IHueToRgbEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IHueToRgbEffect {
    type Vtable = IHueToRgbEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IHueToRgbEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x1e97c12c_b743_53d0_88c4_8435272b0a3d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IHueToRgbEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub SourceColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectHueColorSpace,
    ) -> ::windows::core::HRESULT,
    pub SetSourceColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectHueColorSpace,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IInvertEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IInvertEffect {
    type Vtable = IInvertEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IInvertEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xd4adcdfc_0f60_524d_936a_7f2736ad33d8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IInvertEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILinearTransferEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILinearTransferEffect {
    type Vtable = ILinearTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ILinearTransferEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x43d27ad0_8937_5fdb_876a_4e91cb47540c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ILinearTransferEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub RedOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RedSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub RedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetRedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub GreenOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub GreenSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub GreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetGreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub BlueOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BlueSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub BlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetBlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub AlphaOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaSlope: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ILuminanceToAlphaEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ILuminanceToAlphaEffect {
    type Vtable = ILuminanceToAlphaEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ILuminanceToAlphaEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x22364900_ac51_5bd3_8bd2_d626fc9a65f9,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ILuminanceToAlphaEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IMorphologyEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IMorphologyEffect {
    type Vtable = IMorphologyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IMorphologyEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xff065fdb_62c8_5808_921e_49efa43a3d34,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IMorphologyEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Mode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut MorphologyEffectMode,
    ) -> ::windows::core::HRESULT,
    pub SetMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: MorphologyEffectMode,
    ) -> ::windows::core::HRESULT,
    pub Width: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetWidth: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub Height: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetHeight: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IOpacityEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IOpacityEffect {
    type Vtable = IOpacityEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IOpacityEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x94b6ad75_c540_51b8_a9d1_544174adc68d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IOpacityEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Opacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOpacity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IOpacityEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IOpacityEffectStatics {
    type Vtable = IOpacityEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IOpacityEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x91a7cde3_b9b7_5437_8878_fb2e14100e6d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IOpacityEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IOpacityMetadataEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IOpacityMetadataEffect {
    type Vtable = IOpacityMetadataEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IOpacityMetadataEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x099f3299_9b0a_5ed3_b044_4a6fc96f8362,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IOpacityMetadataEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation")]
    pub OpaqueRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    OpaqueRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub SetOpaqueRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SetOpaqueRectangle: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPixelShaderEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPixelShaderEffect {
    type Vtable = IPixelShaderEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IPixelShaderEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xfc8c3c31_fa96_45e2_8b72_1741c65cee8e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPixelShaderEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Collections")]
    pub Properties: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Collections"))]
    Properties: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source1: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source2: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source3: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source3: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source4: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source4: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source5: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source5: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source6: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source6: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source7: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source7: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source8: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source8: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource1: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource1: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource2: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource2: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource3: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource3: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource4: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource4: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource5: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource5: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource6: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource6: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource7: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource7: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource8: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource8: usize,
    pub Source1Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source2Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source3Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source4Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source5Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source6Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source7Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source8Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource1Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource2Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource3Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource4Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource5Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource6Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource7Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub SetSource8Mapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::HRESULT,
    pub Source1BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source2BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source3BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source4BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source5BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source6BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source7BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Source8BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource1BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource2BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource3BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource4BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource5BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource6BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource7BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetSource8BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub MaxSamplerOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetMaxSamplerOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub Source1Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source2Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source3Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source4Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source5Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source6Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source7Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub Source8Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource1Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource2Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource3Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource4Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource5Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource6Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource7Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetSource8Interpolation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        device: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPixelShaderEffectFactory(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPixelShaderEffectFactory {
    type Vtable = IPixelShaderEffectFactory_Vtbl;
}
unsafe impl ::windows::core::Interface for IPixelShaderEffectFactory {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x9d1727e5_489d_4abc_b129_5361e3534af4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPixelShaderEffectFactory_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Create: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        shaderCode_array_size: u32,
        shadercode: *const u8,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointDiffuseEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointDiffuseEffect {
    type Vtable = IPointDiffuseEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointDiffuseEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x6cce09ec_f847_5661_af4b_531dd3dd7d6e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointDiffuseEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightPosition: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightPosition: usize,
    pub DiffuseAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDiffuseAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub HeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub LightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    LightColor: usize,
    #[cfg(feature = "UI")]
    pub SetLightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetLightColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub HeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    HeightMapKernelSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetHeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetHeightMapKernelSize: usize,
    pub HeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPointSpecularEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPointSpecularEffect {
    type Vtable = IPointSpecularEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IPointSpecularEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xec8afe9b_8501_5286_a43c_1afff7420ad6,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPointSpecularEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightPosition: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightPosition: usize,
    pub SpecularExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSpecularExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SpecularAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSpecularAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub HeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub LightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    LightColor: usize,
    #[cfg(feature = "UI")]
    pub SetLightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetLightColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub HeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    HeightMapKernelSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetHeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetHeightMapKernelSize: usize,
    pub HeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPosterizeEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPosterizeEffect {
    type Vtable = IPosterizeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IPosterizeEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x2f631a3b_c89a_507c_9756_299b61434fa4,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPosterizeEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub RedValueCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetRedValueCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub GreenValueCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenValueCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub BlueValueCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueValueCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IPremultiplyEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IPremultiplyEffect {
    type Vtable = IPremultiplyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IPremultiplyEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xd29a9d1e_bd57_5f3e_9ae0_009c6ac5b06d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IPremultiplyEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IRgbToHueEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IRgbToHueEffect {
    type Vtable = IRgbToHueEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IRgbToHueEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7caeadc6_9eb3_5895_b876_f485c9574847,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IRgbToHueEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub OutputColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectHueColorSpace,
    ) -> ::windows::core::HRESULT,
    pub SetOutputColorSpace: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectHueColorSpace,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISaturationEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISaturationEffect {
    type Vtable = ISaturationEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ISaturationEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xf85a5ed7_7212_57a6_b357_61038961c58d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISaturationEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Saturation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSaturation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IScaleEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IScaleEffect {
    type Vtable = IScaleEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IScaleEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7522ae90_bec2_512c_bcc0_4d6a97e3ed34,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IScaleEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub Scale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    Scale: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetScale: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub CenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    CenterPoint: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetCenterPoint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetCenterPoint: usize,
    pub InterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub Sharpness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSharpness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISepiaEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISepiaEffect {
    type Vtable = ISepiaEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ISepiaEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xf933471f_a7af_5521_be79_b0da22976cff,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISepiaEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Intensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetIntensity: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IShadowEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IShadowEffect {
    type Vtable = IShadowEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IShadowEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x3947c621_78da_5489_9927_be655f4576e2,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IShadowEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub BlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlurAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub ShadowColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    ShadowColor: usize,
    #[cfg(feature = "UI")]
    pub SetShadowColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetShadowColor: usize,
    pub Optimization: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectOptimization,
    ) -> ::windows::core::HRESULT,
    pub SetOptimization: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectOptimization,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub ShadowColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    ShadowColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetShadowColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetShadowColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISharpenEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISharpenEffect {
    type Vtable = ISharpenEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ISharpenEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x7efef0a1_7578_5f62_8364_46145674ef7e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISharpenEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Threshold: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetThreshold: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpotDiffuseEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpotDiffuseEffect {
    type Vtable = ISpotDiffuseEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpotDiffuseEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xb3dcbe44_1dd7_5cb3_95e5_a48974cd12e8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotDiffuseEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightPosition: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightPosition: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightTarget: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightTarget: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub LimitingConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLimitingConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub DiffuseAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetDiffuseAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub HeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub LightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    LightColor: usize,
    #[cfg(feature = "UI")]
    pub SetLightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetLightColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub HeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    HeightMapKernelSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetHeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetHeightMapKernelSize: usize,
    pub HeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ISpotSpecularEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ISpotSpecularEffect {
    type Vtable = ISpotSpecularEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ISpotSpecularEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x83ae4cd0_80aa_5783_8572_f15e5f85329e,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ISpotSpecularEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightPosition: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightPosition: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightTarget: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightTarget: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightTarget: usize,
    pub Focus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetFocus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub LimitingConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetLimitingConeAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SpecularExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSpecularExponent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub SpecularAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSpecularAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub HeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapScale: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "UI")]
    pub LightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    LightColor: usize,
    #[cfg(feature = "UI")]
    pub SetLightColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetLightColor: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub HeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    HeightMapKernelSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetHeightMapKernelSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetHeightMapKernelSize: usize,
    pub HeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetHeightMapInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub LightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    LightColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetLightColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetLightColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IStraightenEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IStraightenEffect {
    type Vtable = IStraightenEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IStraightenEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x965fc262_2eba_59e6_935f_2389cb5a305a,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IStraightenEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Angle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAngle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub MaintainSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetMaintainSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub InterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITableTransfer3DEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITableTransfer3DEffect {
    type Vtable = ITableTransfer3DEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITableTransfer3DEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xef09c6e0_9437_53f7_b7b4_b53c79a0bc37,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITableTransfer3DEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Table: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub SetTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    pub AlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITableTransferEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITableTransferEffect {
    type Vtable = ITableTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITableTransferEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0xbf0b63b6_fe77_5198_a2a1_3fb80c268b8f,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITableTransferEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub RedTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetRedTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub RedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetRedDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub GreenTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetGreenTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub GreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetGreenDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub BlueTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetBlueTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub BlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetBlueDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub AlphaTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result_size__: *mut u32,
        result__: *mut *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaTable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        valueElements_array_size: u32,
        valueelements: *const f32,
    ) -> ::windows::core::HRESULT,
    pub AlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetAlphaDisable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITemperatureAndTintEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITemperatureAndTintEffect {
    type Vtable = ITemperatureAndTintEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITemperatureAndTintEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x8ae43e02_2619_5d78_8980_4ed569549bd8,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITemperatureAndTintEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub Temperature: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTemperature: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Tint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetTint: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITileEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITileEffect {
    type Vtable = ITileEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITileEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x78a809cb_1154_5ad6_a880_e3a175772815,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITileEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation")]
    pub SourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SourceRectangle: usize,
    #[cfg(feature = "Foundation")]
    pub SetSourceRectangle: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation"))]
    SetSourceRectangle: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITintEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITintEffect {
    type Vtable = ITintEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITintEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x729a21ea_c61e_5308_9eae_d638aa1f5b8c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITintEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI")]
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    Color: usize,
    #[cfg(feature = "UI")]
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetColor: usize,
    pub ClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetClampOutput: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub ColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    ColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITintEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITintEffectStatics {
    type Vtable = ITintEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for ITintEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x65e31771_4baf_5c8c_93f4_3b874e29f68d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITintEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITransform2DEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITransform2DEffect {
    type Vtable = ITransform2DEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITransform2DEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x4467d118_33e7_5b1a_87c2_0f1f0497353d,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransform2DEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    TransformMatrix: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetTransformMatrix: usize,
    pub Sharpness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetSharpness: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITransform3DEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITransform3DEffect {
    type Vtable = ITransform3DEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITransform3DEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x3025ed7f_8f25_5e0b_80c9_56bbdd3e8a10,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITransform3DEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub SetInterpolationMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::HRESULT,
    pub BorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    pub SetBorderMode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: EffectBorderMode,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub TransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    TransformMatrix: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetTransformMatrix: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetTransformMatrix: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct ITurbulenceEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for ITurbulenceEffect {
    type Vtable = ITurbulenceEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ITurbulenceEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x1cb1b33d_20e9_564b_856e_37e9fa1d0016,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct ITurbulenceEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Foundation_Numerics")]
    pub Offset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    Offset: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetOffset: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetOffset: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub Size: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    Size: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetSize: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub Frequency: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    Frequency: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetFrequency: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetFrequency: usize,
    pub Octaves: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetOctaves: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub Seed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetSeed: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: i32,
    ) -> ::windows::core::HRESULT,
    pub Noise: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut TurbulenceEffectNoise,
    ) -> ::windows::core::HRESULT,
    pub SetNoise: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: TurbulenceEffectNoise,
    ) -> ::windows::core::HRESULT,
    pub Tileable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
    pub SetTileable: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: bool,
    ) -> ::windows::core::HRESULT,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IUnPremultiplyEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IUnPremultiplyEffect {
    type Vtable = IUnPremultiplyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IUnPremultiplyEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x73098bb4_dcf1_5403_af44_3344d2982d40,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IUnPremultiplyEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IVignetteEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IVignetteEffect {
    type Vtable = IVignetteEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IVignetteEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x574d0f9f_eec7_5989_ac53_135868cf5e0c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IVignetteEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    #[cfg(feature = "UI")]
    pub Color: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    Color: usize,
    #[cfg(feature = "UI")]
    pub SetColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::UI::Color,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "UI"))]
    SetColor: usize,
    pub Amount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetAmount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub Curve: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetCurve: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Foundation_Numerics")]
    pub ColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    ColorHdr: usize,
    #[cfg(feature = "Foundation_Numerics")]
    pub SetColorHdr: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Foundation_Numerics"))]
    SetColorHdr: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWhiteLevelAdjustmentEffect(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IWhiteLevelAdjustmentEffect {
    type Vtable = IWhiteLevelAdjustmentEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for IWhiteLevelAdjustmentEffect {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x0b0b945c_96f7_56b4_8317_01de629fc904,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWhiteLevelAdjustmentEffect_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub InputWhiteLevel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetInputWhiteLevel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    pub OutputWhiteLevel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut f32,
    ) -> ::windows::core::HRESULT,
    pub SetOutputWhiteLevel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: f32,
    ) -> ::windows::core::HRESULT,
    #[cfg(feature = "Graphics_Effects")]
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    Source: usize,
    #[cfg(feature = "Graphics_Effects")]
    pub SetSource: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
    #[cfg(not(feature = "Graphics_Effects"))]
    SetSource: usize,
}
#[doc(hidden)]
#[repr(transparent)]
pub struct IWhiteLevelAdjustmentEffectStatics(::windows::core::IUnknown);
unsafe impl ::windows::core::Vtable for IWhiteLevelAdjustmentEffectStatics {
    type Vtable = IWhiteLevelAdjustmentEffectStatics_Vtbl;
}
unsafe impl ::windows::core::Interface for IWhiteLevelAdjustmentEffectStatics {
    const IID: ::windows::core::GUID = ::windows::core::GUID::from_u128(
        0x58dacbf8_637a_5da7_9457_1eeedf5a191c,
    );
}
#[repr(C)]
#[doc(hidden)]
pub struct IWhiteLevelAdjustmentEffectStatics_Vtbl {
    pub base__: ::windows::core::IInspectable_Vtbl,
    pub IsSupported: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result__: *mut bool,
    ) -> ::windows::core::HRESULT,
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct AlphaMaskEffect(::windows::core::IUnknown);
impl AlphaMaskEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            AlphaMaskEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn AlphaMask(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaMask)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetAlphaMask<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaMask)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsSupported() -> ::windows::core::Result<bool> {
        Self::IAlphaMaskEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn IAlphaMaskEffectStatics<
        R,
        F: FnOnce(&IAlphaMaskEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            AlphaMaskEffect,
            IAlphaMaskEffectStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for AlphaMaskEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for AlphaMaskEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AlphaMaskEffect {}
impl ::core::fmt::Debug for AlphaMaskEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AlphaMaskEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AlphaMaskEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect;{9ba6607e-75c9-5388-892f-dd3440564d98})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for AlphaMaskEffect {
    type Vtable = IAlphaMaskEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for AlphaMaskEffect {
    const IID: ::windows::core::GUID = <IAlphaMaskEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for AlphaMaskEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect";
}
::windows::core::interface_hierarchy!(
    AlphaMaskEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<AlphaMaskEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AlphaMaskEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<AlphaMaskEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AlphaMaskEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<AlphaMaskEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&AlphaMaskEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<AlphaMaskEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<AlphaMaskEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AlphaMaskEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AlphaMaskEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for AlphaMaskEffect {}
unsafe impl ::core::marker::Sync for AlphaMaskEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ArithmeticCompositeEffect(::windows::core::IUnknown);
impl ArithmeticCompositeEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ArithmeticCompositeEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn MultiplyAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .MultiplyAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetMultiplyAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMultiplyAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Source1Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1Amount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSource1Amount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1Amount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Source2Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2Amount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSource2Amount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2Amount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Offset)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source1(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource1<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source2(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource2<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ArithmeticCompositeEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ArithmeticCompositeEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ArithmeticCompositeEffect {}
impl ::core::fmt::Debug for ArithmeticCompositeEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ArithmeticCompositeEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ArithmeticCompositeEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect;{beeb682b-d64c-5c8b-a1fb-332162ed099c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ArithmeticCompositeEffect {
    type Vtable = IArithmeticCompositeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ArithmeticCompositeEffect {
    const IID: ::windows::core::GUID = <IArithmeticCompositeEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ArithmeticCompositeEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect";
}
::windows::core::interface_hierarchy!(
    ArithmeticCompositeEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ArithmeticCompositeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ArithmeticCompositeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ArithmeticCompositeEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ArithmeticCompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ArithmeticCompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ArithmeticCompositeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ArithmeticCompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ArithmeticCompositeEffect {}
unsafe impl ::core::marker::Sync for ArithmeticCompositeEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct AtlasEffect(::windows::core::IUnknown);
impl AtlasEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            AtlasEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SourceRectangle(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetSourceRectangle(
        &self,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceRectangle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn PaddingRectangle(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .PaddingRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetPaddingRectangle(
        &self,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetPaddingRectangle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for AtlasEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for AtlasEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for AtlasEffect {}
impl ::core::fmt::Debug for AtlasEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("AtlasEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for AtlasEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.AtlasEffect;{f7f26eba-f015-5eff-9af3-7bd2d44904bd})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for AtlasEffect {
    type Vtable = IAtlasEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for AtlasEffect {
    const IID: ::windows::core::GUID = <IAtlasEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for AtlasEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.AtlasEffect";
}
::windows::core::interface_hierarchy!(
    AtlasEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<AtlasEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: AtlasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AtlasEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&AtlasEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<AtlasEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: AtlasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&AtlasEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&AtlasEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<AtlasEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: AtlasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&AtlasEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&AtlasEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<AtlasEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: AtlasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AtlasEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AtlasEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<AtlasEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: AtlasEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AtlasEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&AtlasEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &AtlasEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for AtlasEffect {}
unsafe impl ::core::marker::Sync for AtlasEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct BlendEffect(::windows::core::IUnknown);
impl BlendEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            BlendEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn Mode(&self) -> ::windows::core::Result<BlendEffectMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Mode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetMode(&self, value: BlendEffectMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Background(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Background)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetBackground<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBackground)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Foreground(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Foreground)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetForeground<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetForeground)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for BlendEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BlendEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BlendEffect {}
impl ::core::fmt::Debug for BlendEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BlendEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BlendEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.BlendEffect;{5673248e-7266-5e49-b2ab-2589d5d875c3})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BlendEffect {
    type Vtable = IBlendEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for BlendEffect {
    const IID: ::windows::core::GUID = <IBlendEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BlendEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.BlendEffect";
}
::windows::core::interface_hierarchy!(
    BlendEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BlendEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: BlendEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BlendEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&BlendEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BlendEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: BlendEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BlendEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&BlendEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<BlendEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: BlendEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&BlendEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&BlendEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<BlendEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: BlendEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BlendEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BlendEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<BlendEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: BlendEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BlendEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BlendEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BlendEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for BlendEffect {}
unsafe impl ::core::marker::Sync for BlendEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct BorderEffect(::windows::core::IUnknown);
impl BorderEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            BorderEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn ExtendX(&self) -> ::windows::core::Result<super::CanvasEdgeBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ExtendX)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetExtendX(
        &self,
        value: super::CanvasEdgeBehavior,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetExtendX)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ExtendY(&self) -> ::windows::core::Result<super::CanvasEdgeBehavior> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ExtendY)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetExtendY(
        &self,
        value: super::CanvasEdgeBehavior,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetExtendY)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for BorderEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BorderEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BorderEffect {}
impl ::core::fmt::Debug for BorderEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BorderEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BorderEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.BorderEffect;{31602441-15db-5b4a-98dd-ba4247548b41})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BorderEffect {
    type Vtable = IBorderEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for BorderEffect {
    const IID: ::windows::core::GUID = <IBorderEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BorderEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.BorderEffect";
}
::windows::core::interface_hierarchy!(
    BorderEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BorderEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: BorderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BorderEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BorderEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: BorderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BorderEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<BorderEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: BorderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&BorderEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<BorderEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: BorderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<BorderEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: BorderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BorderEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BorderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for BorderEffect {}
unsafe impl ::core::marker::Sync for BorderEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct BrightnessEffect(::windows::core::IUnknown);
impl BrightnessEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            BrightnessEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn WhitePoint(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .WhitePoint)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetWhitePoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetWhitePoint)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn BlackPoint(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlackPoint)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetBlackPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlackPoint)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for BrightnessEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for BrightnessEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for BrightnessEffect {}
impl ::core::fmt::Debug for BrightnessEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BrightnessEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BrightnessEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.BrightnessEffect;{beced347-025f-5727-8f7d-498d67df557e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for BrightnessEffect {
    type Vtable = IBrightnessEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for BrightnessEffect {
    const IID: ::windows::core::GUID = <IBrightnessEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for BrightnessEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.BrightnessEffect";
}
::windows::core::interface_hierarchy!(
    BrightnessEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<BrightnessEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: BrightnessEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BrightnessEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<BrightnessEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: BrightnessEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&BrightnessEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<BrightnessEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: BrightnessEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&BrightnessEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<BrightnessEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: BrightnessEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<BrightnessEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: BrightnessEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&BrightnessEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &BrightnessEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for BrightnessEffect {}
unsafe impl ::core::marker::Sync for BrightnessEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ChromaKeyEffect(::windows::core::IUnknown);
impl ChromaKeyEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ChromaKeyEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Color)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Tolerance(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Tolerance)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetTolerance(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTolerance)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn InvertAlpha(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InvertAlpha)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInvertAlpha(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInvertAlpha)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Feather(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Feather)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetFeather(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetFeather)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn ColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ColorHdr)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ChromaKeyEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ChromaKeyEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ChromaKeyEffect {}
impl ::core::fmt::Debug for ChromaKeyEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ChromaKeyEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ChromaKeyEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect;{f14b9464-1871-5eaa-9db6-c0901140e9d3})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ChromaKeyEffect {
    type Vtable = IChromaKeyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ChromaKeyEffect {
    const IID: ::windows::core::GUID = <IChromaKeyEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ChromaKeyEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect";
}
::windows::core::interface_hierarchy!(
    ChromaKeyEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ChromaKeyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ChromaKeyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ChromaKeyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ChromaKeyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ChromaKeyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ChromaKeyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ChromaKeyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ChromaKeyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ChromaKeyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ChromaKeyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ChromaKeyEffect {}
unsafe impl ::core::marker::Sync for ChromaKeyEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ColorManagementEffect(::windows::core::IUnknown);
impl ColorManagementEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorManagementEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn SourceColorProfile(&self) -> ::windows::core::Result<ColorManagementProfile> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceColorProfile)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSourceColorProfile(
        &self,
        value: &ColorManagementProfile,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceColorProfile)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn SourceRenderingIntent(
        &self,
    ) -> ::windows::core::Result<ColorManagementRenderingIntent> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceRenderingIntent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSourceRenderingIntent(
        &self,
        value: ColorManagementRenderingIntent,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceRenderingIntent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn OutputColorProfile(&self) -> ::windows::core::Result<ColorManagementProfile> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OutputColorProfile)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOutputColorProfile(
        &self,
        value: &ColorManagementProfile,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOutputColorProfile)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn OutputRenderingIntent(
        &self,
    ) -> ::windows::core::Result<ColorManagementRenderingIntent> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OutputRenderingIntent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOutputRenderingIntent(
        &self,
        value: ColorManagementRenderingIntent,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOutputRenderingIntent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaMode(&self) -> ::windows::core::Result<super::CanvasAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaMode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAlphaMode(
        &self,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Quality(&self) -> ::windows::core::Result<ColorManagementEffectQuality> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Quality)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetQuality(
        &self,
        value: ColorManagementEffectQuality,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetQuality)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsBestQualitySupported(
        device: &super::CanvasDevice,
    ) -> ::windows::core::Result<bool> {
        Self::IColorManagementEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsBestQualitySupported)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(device),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn IColorManagementEffectStatics<
        R,
        F: FnOnce(&IColorManagementEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorManagementEffect,
            IColorManagementEffectStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ColorManagementEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorManagementEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorManagementEffect {}
impl ::core::fmt::Debug for ColorManagementEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorManagementEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorManagementEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ColorManagementEffect;{6e8bbe37-e1e4-5ad0-b98d-940e3213a54e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorManagementEffect {
    type Vtable = IColorManagementEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorManagementEffect {
    const IID: ::windows::core::GUID = <IColorManagementEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorManagementEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ColorManagementEffect";
}
::windows::core::interface_hierarchy!(
    ColorManagementEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ColorManagementEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorManagementEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ColorManagementEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorManagementEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ColorManagementEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ColorManagementEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ColorManagementEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorManagementEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ColorManagementEffect {}
unsafe impl ::core::marker::Sync for ColorManagementEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ColorManagementProfile(::windows::core::IUnknown);
impl ColorManagementProfile {
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ColorSpace(&self) -> ::windows::core::Result<super::CanvasColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ColorSpace)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn IccProfile(&self) -> ::windows::core::Result<::windows::core::Array<u8>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IccProfile)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        u8,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn Type(&self) -> ::windows::core::Result<ColorManagementProfileType> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Type)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SimpleProfile(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<ColorManagementSimpleProfile>,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SimpleProfile)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn ExtendedColorSpace(&self) -> ::windows::core::Result<ExtendedColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ExtendedColorSpace)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Create(
        colorspace: super::CanvasColorSpace,
    ) -> ::windows::core::Result<ColorManagementProfile> {
        Self::IColorManagementProfileFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Create)(
                    ::windows::core::Vtable::as_raw(this),
                    colorspace,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    pub fn CreateCustom(
        iccprofile: &[u8],
    ) -> ::windows::core::Result<ColorManagementProfile> {
        Self::IColorManagementProfileStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CreateCustom)(
                    ::windows::core::Vtable::as_raw(this),
                    iccprofile.len() as u32,
                    iccprofile.as_ptr(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn CreateSimple(
        simpleprofile: ColorManagementSimpleProfile,
    ) -> ::windows::core::Result<ColorManagementProfile> {
        Self::IColorManagementProfileStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CreateSimple)(
                    ::windows::core::Vtable::as_raw(this),
                    simpleprofile,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    pub fn CreateExtended(
        colorspace: ExtendedColorSpace,
    ) -> ::windows::core::Result<ColorManagementProfile> {
        Self::IColorManagementProfileStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CreateExtended)(
                    ::windows::core::Vtable::as_raw(this),
                    colorspace,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    pub fn IsSupported(
        r#type: ColorManagementProfileType,
        device: &super::CanvasDevice,
    ) -> ::windows::core::Result<bool> {
        Self::IColorManagementProfileStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    r#type,
                    ::core::mem::transmute_copy(device),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IColorManagementProfileFactory<
        R,
        F: FnOnce(&IColorManagementProfileFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorManagementProfile,
            IColorManagementProfileFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    #[doc(hidden)]
    pub fn IColorManagementProfileStatics<
        R,
        F: FnOnce(&IColorManagementProfileStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorManagementProfile,
            IColorManagementProfileStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for ColorManagementProfile {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorManagementProfile {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorManagementProfile {}
impl ::core::fmt::Debug for ColorManagementProfile {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorManagementProfile").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorManagementProfile {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ColorManagementProfile;{5123a56b-b199-47ab-aebe-d308044423fe})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorManagementProfile {
    type Vtable = IColorManagementProfile_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorManagementProfile {
    const IID: ::windows::core::GUID = <IColorManagementProfile as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorManagementProfile {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ColorManagementProfile";
}
::windows::core::interface_hierarchy!(
    ColorManagementProfile,::windows::core::IUnknown,::windows::core::IInspectable
);
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ColorManagementProfile>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorManagementProfile) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorManagementProfile>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementProfile) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorManagementProfile>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorManagementProfile) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ColorManagementProfile {}
unsafe impl ::core::marker::Sync for ColorManagementProfile {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ColorMatrixEffect(::windows::core::IUnknown);
impl ColorMatrixEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorMatrixEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn ColorMatrix(&self) -> ::windows::core::Result<Matrix5x4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ColorMatrix)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetColorMatrix(&self, value: Matrix5x4) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColorMatrix)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaMode(&self) -> ::windows::core::Result<super::CanvasAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaMode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAlphaMode(
        &self,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ColorMatrixEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorMatrixEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorMatrixEffect {}
impl ::core::fmt::Debug for ColorMatrixEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorMatrixEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorMatrixEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect;{e6ae54c4-883d-588e-b451-e9ebe3830437})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorMatrixEffect {
    type Vtable = IColorMatrixEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorMatrixEffect {
    const IID: ::windows::core::GUID = <IColorMatrixEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorMatrixEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect";
}
::windows::core::interface_hierarchy!(
    ColorMatrixEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ColorMatrixEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorMatrixEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ColorMatrixEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorMatrixEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ColorMatrixEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorMatrixEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ColorMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ColorMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorMatrixEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ColorMatrixEffect {}
unsafe impl ::core::marker::Sync for ColorMatrixEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ColorSourceEffect(::windows::core::IUnknown);
impl ColorSourceEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ColorSourceEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Color)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn ColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ColorHdr)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ColorSourceEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ColorSourceEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ColorSourceEffect {}
impl ::core::fmt::Debug for ColorSourceEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorSourceEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorSourceEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ColorSourceEffect;{25f942c7-7fee-518a-ba7b-22a0060af7f6})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ColorSourceEffect {
    type Vtable = IColorSourceEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ColorSourceEffect {
    const IID: ::windows::core::GUID = <IColorSourceEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ColorSourceEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ColorSourceEffect";
}
::windows::core::interface_hierarchy!(
    ColorSourceEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ColorSourceEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorSourceEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ColorSourceEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ColorSourceEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ColorSourceEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorSourceEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ColorSourceEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ColorSourceEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ColorSourceEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ColorSourceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ColorSourceEffect {}
unsafe impl ::core::marker::Sync for ColorSourceEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct CompositeEffect(::windows::core::IUnknown);
impl CompositeEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CompositeEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<super::CanvasComposite> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Mode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetMode(&self, value: super::CanvasComposite) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Collections"`, `"Graphics_Effects"`*
    #[cfg(all(feature = "Foundation_Collections", feature = "Graphics_Effects"))]
    pub fn Sources(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IVector::<
            ::windows::Graphics::Effects::IGraphicsEffectSource,
        >,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Sources)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for CompositeEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CompositeEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CompositeEffect {}
impl ::core::fmt::Debug for CompositeEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CompositeEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CompositeEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.CompositeEffect;{f8808c48-cdc7-5db4-807c-b9344ff71984})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CompositeEffect {
    type Vtable = ICompositeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for CompositeEffect {
    const IID: ::windows::core::GUID = <ICompositeEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CompositeEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.CompositeEffect";
}
::windows::core::interface_hierarchy!(
    CompositeEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CompositeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CompositeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CompositeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<CompositeEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&CompositeEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<CompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<CompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: CompositeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CompositeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CompositeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CompositeEffect {}
unsafe impl ::core::marker::Sync for CompositeEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ContrastEffect(::windows::core::IUnknown);
impl ContrastEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ContrastEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Contrast(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Contrast)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetContrast(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetContrast)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampSource(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampSource)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampSource(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampSource)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ContrastEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ContrastEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ContrastEffect {}
impl ::core::fmt::Debug for ContrastEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ContrastEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ContrastEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ContrastEffect;{da8a2b9f-594e-560a-9eaa-1f912408fe79})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ContrastEffect {
    type Vtable = IContrastEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ContrastEffect {
    const IID: ::windows::core::GUID = <IContrastEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ContrastEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ContrastEffect";
}
::windows::core::interface_hierarchy!(
    ContrastEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ContrastEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ContrastEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ContrastEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ContrastEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ContrastEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ContrastEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ContrastEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ContrastEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ContrastEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ContrastEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ContrastEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ContrastEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ContrastEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ContrastEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ContrastEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ContrastEffect {}
unsafe impl ::core::marker::Sync for ContrastEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ConvolveMatrixEffect(::windows::core::IUnknown);
impl ConvolveMatrixEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ConvolveMatrixEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn KernelScale(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .KernelScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetKernelScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetKernelScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn InterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInterpolationMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn KernelWidth(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .KernelWidth)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetKernelWidth(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetKernelWidth)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn KernelHeight(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .KernelHeight)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetKernelHeight(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetKernelHeight)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn KernelMatrix(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .KernelMatrix)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetKernelMatrix(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetKernelMatrix)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn Divisor(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Divisor)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetDivisor(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetDivisor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Offset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Offset)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn KernelOffset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .KernelOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetKernelOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetKernelOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn PreserveAlpha(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .PreserveAlpha)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetPreserveAlpha(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetPreserveAlpha)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ConvolveMatrixEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ConvolveMatrixEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ConvolveMatrixEffect {}
impl ::core::fmt::Debug for ConvolveMatrixEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ConvolveMatrixEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ConvolveMatrixEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect;{82961257-a78d-5440-8026-af57d4a76a9e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ConvolveMatrixEffect {
    type Vtable = IConvolveMatrixEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ConvolveMatrixEffect {
    const IID: ::windows::core::GUID = <IConvolveMatrixEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ConvolveMatrixEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect";
}
::windows::core::interface_hierarchy!(
    ConvolveMatrixEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ConvolveMatrixEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ConvolveMatrixEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ConvolveMatrixEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ConvolveMatrixEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ConvolveMatrixEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ConvolveMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ConvolveMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ConvolveMatrixEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ConvolveMatrixEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ConvolveMatrixEffect {}
unsafe impl ::core::marker::Sync for ConvolveMatrixEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct CropEffect(::windows::core::IUnknown);
impl CropEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CropEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SourceRectangle(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetSourceRectangle(
        &self,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceRectangle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for CropEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CropEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CropEffect {}
impl ::core::fmt::Debug for CropEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CropEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CropEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.CropEffect;{d8a1c2a5-e031-566d-8f7c-ba07cfb58aae})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CropEffect {
    type Vtable = ICropEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for CropEffect {
    const IID: ::windows::core::GUID = <ICropEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CropEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.CropEffect";
}
::windows::core::interface_hierarchy!(
    CropEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CropEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: CropEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CropEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&CropEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CropEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: CropEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CropEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&CropEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<CropEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CropEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&CropEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&CropEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<CropEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: CropEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CropEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CropEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<CropEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: CropEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CropEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CropEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CropEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CropEffect {}
unsafe impl ::core::marker::Sync for CropEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct CrossFadeEffect(::windows::core::IUnknown);
impl CrossFadeEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CrossFadeEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn CrossFade(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CrossFade)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetCrossFade(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCrossFade)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source2(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource2<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source1(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource1<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsSupported() -> ::windows::core::Result<bool> {
        Self::ICrossFadeEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    #[doc(hidden)]
    pub fn ICrossFadeEffectStatics<
        R,
        F: FnOnce(&ICrossFadeEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            CrossFadeEffect,
            ICrossFadeEffectStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for CrossFadeEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for CrossFadeEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for CrossFadeEffect {}
impl ::core::fmt::Debug for CrossFadeEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("CrossFadeEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for CrossFadeEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.CrossFadeEffect;{be161a9f-43d2-5613-8600-d51e3d7ce288})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for CrossFadeEffect {
    type Vtable = ICrossFadeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for CrossFadeEffect {
    const IID: ::windows::core::GUID = <ICrossFadeEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for CrossFadeEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.CrossFadeEffect";
}
::windows::core::interface_hierarchy!(
    CrossFadeEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<CrossFadeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CrossFadeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<CrossFadeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&CrossFadeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<CrossFadeEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&CrossFadeEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<CrossFadeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<CrossFadeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&CrossFadeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &CrossFadeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for CrossFadeEffect {}
unsafe impl ::core::marker::Sync for CrossFadeEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct DirectionalBlurEffect(::windows::core::IUnknown);
impl DirectionalBlurEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DirectionalBlurEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn BlurAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlurAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlurAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlurAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Angle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Angle)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAngle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Optimization(&self) -> ::windows::core::Result<EffectOptimization> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Optimization)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOptimization(
        &self,
        value: EffectOptimization,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOptimization)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for DirectionalBlurEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DirectionalBlurEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DirectionalBlurEffect {}
impl ::core::fmt::Debug for DirectionalBlurEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DirectionalBlurEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DirectionalBlurEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect;{5d155c4b-0882-506a-a8e1-12e1ead17f0a})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DirectionalBlurEffect {
    type Vtable = IDirectionalBlurEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for DirectionalBlurEffect {
    const IID: ::windows::core::GUID = <IDirectionalBlurEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DirectionalBlurEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect";
}
::windows::core::interface_hierarchy!(
    DirectionalBlurEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DirectionalBlurEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DirectionalBlurEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DirectionalBlurEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DirectionalBlurEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<DirectionalBlurEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DirectionalBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DirectionalBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DirectionalBlurEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DirectionalBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DirectionalBlurEffect {}
unsafe impl ::core::marker::Sync for DirectionalBlurEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct DiscreteTransferEffect(::windows::core::IUnknown);
impl DiscreteTransferEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DiscreteTransferEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn RedTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetRedTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn RedDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetGreenTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn GreenDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetBlueTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn BlueDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetAlphaTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn AlphaDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for DiscreteTransferEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DiscreteTransferEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DiscreteTransferEffect {}
impl ::core::fmt::Debug for DiscreteTransferEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DiscreteTransferEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DiscreteTransferEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect;{7f1f54f9-21b5-5b91-9506-832c536fddfa})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DiscreteTransferEffect {
    type Vtable = IDiscreteTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for DiscreteTransferEffect {
    const IID: ::windows::core::GUID = <IDiscreteTransferEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DiscreteTransferEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect";
}
::windows::core::interface_hierarchy!(
    DiscreteTransferEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DiscreteTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DiscreteTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DiscreteTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DiscreteTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<DiscreteTransferEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DiscreteTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DiscreteTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DiscreteTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DiscreteTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DiscreteTransferEffect {}
unsafe impl ::core::marker::Sync for DiscreteTransferEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct DisplacementMapEffect(::windows::core::IUnknown);
impl DisplacementMapEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DisplacementMapEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Amount)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn XChannelSelect(&self) -> ::windows::core::Result<EffectChannelSelect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .XChannelSelect)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetXChannelSelect(
        &self,
        value: EffectChannelSelect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetXChannelSelect)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn YChannelSelect(&self) -> ::windows::core::Result<EffectChannelSelect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .YChannelSelect)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetYChannelSelect(
        &self,
        value: EffectChannelSelect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetYChannelSelect)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Displacement(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Displacement)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetDisplacement<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetDisplacement)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for DisplacementMapEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DisplacementMapEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DisplacementMapEffect {}
impl ::core::fmt::Debug for DisplacementMapEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DisplacementMapEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DisplacementMapEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect;{45f57c50-d4d9-5af1-8a6b-50378f3498a2})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DisplacementMapEffect {
    type Vtable = IDisplacementMapEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for DisplacementMapEffect {
    const IID: ::windows::core::GUID = <IDisplacementMapEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DisplacementMapEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect";
}
::windows::core::interface_hierarchy!(
    DisplacementMapEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DisplacementMapEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DisplacementMapEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DisplacementMapEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DisplacementMapEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<DisplacementMapEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DisplacementMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DisplacementMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DisplacementMapEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DisplacementMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DisplacementMapEffect {}
unsafe impl ::core::marker::Sync for DisplacementMapEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct DistantDiffuseEffect(::windows::core::IUnknown);
impl DistantDiffuseEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DistantDiffuseEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Azimuth(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Azimuth)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAzimuth(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAzimuth)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Elevation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Elevation)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetElevation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetElevation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn DiffuseAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .DiffuseAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetDiffuseAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetDiffuseAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn LightColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetLightColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn HeightMapKernelSize(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapKernelSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetHeightMapKernelSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapKernelSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for DistantDiffuseEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DistantDiffuseEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DistantDiffuseEffect {}
impl ::core::fmt::Debug for DistantDiffuseEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DistantDiffuseEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DistantDiffuseEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect;{d501b10b-b445-50f4-8b8f-cdecfcdd1321})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DistantDiffuseEffect {
    type Vtable = IDistantDiffuseEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for DistantDiffuseEffect {
    const IID: ::windows::core::GUID = <IDistantDiffuseEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DistantDiffuseEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect";
}
::windows::core::interface_hierarchy!(
    DistantDiffuseEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DistantDiffuseEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DistantDiffuseEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DistantDiffuseEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DistantDiffuseEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<DistantDiffuseEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DistantDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DistantDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantDiffuseEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DistantDiffuseEffect {}
unsafe impl ::core::marker::Sync for DistantDiffuseEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct DistantSpecularEffect(::windows::core::IUnknown);
impl DistantSpecularEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DistantSpecularEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Azimuth(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Azimuth)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAzimuth(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAzimuth)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Elevation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Elevation)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetElevation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetElevation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SpecularExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SpecularExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSpecularExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSpecularExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SpecularAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SpecularAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSpecularAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSpecularAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn LightColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetLightColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn HeightMapKernelSize(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapKernelSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetHeightMapKernelSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapKernelSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for DistantSpecularEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DistantSpecularEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DistantSpecularEffect {}
impl ::core::fmt::Debug for DistantSpecularEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DistantSpecularEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DistantSpecularEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect;{a7a828df-3072-545f-8d75-86c100f03231})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DistantSpecularEffect {
    type Vtable = IDistantSpecularEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for DistantSpecularEffect {
    const IID: ::windows::core::GUID = <IDistantSpecularEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DistantSpecularEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect";
}
::windows::core::interface_hierarchy!(
    DistantSpecularEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DistantSpecularEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DistantSpecularEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DistantSpecularEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DistantSpecularEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<DistantSpecularEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DistantSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DistantSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DistantSpecularEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DistantSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DistantSpecularEffect {}
unsafe impl ::core::marker::Sync for DistantSpecularEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct DpiCompensationEffect(::windows::core::IUnknown);
impl DpiCompensationEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            DpiCompensationEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn InterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInterpolationMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SourceDpi(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceDpi)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetSourceDpi(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceDpi)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for DpiCompensationEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for DpiCompensationEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for DpiCompensationEffect {}
impl ::core::fmt::Debug for DpiCompensationEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("DpiCompensationEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for DpiCompensationEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect;{636597cd-f94a-55b6-9cf0-694a53d638ea})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for DpiCompensationEffect {
    type Vtable = IDpiCompensationEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for DpiCompensationEffect {
    const IID: ::windows::core::GUID = <IDpiCompensationEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for DpiCompensationEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect";
}
::windows::core::interface_hierarchy!(
    DpiCompensationEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<DpiCompensationEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DpiCompensationEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<DpiCompensationEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&DpiCompensationEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<DpiCompensationEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DpiCompensationEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<DpiCompensationEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&DpiCompensationEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &DpiCompensationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for DpiCompensationEffect {}
unsafe impl ::core::marker::Sync for DpiCompensationEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct EdgeDetectionEffect(::windows::core::IUnknown);
impl EdgeDetectionEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EdgeDetectionEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Amount)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlurAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlurAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlurAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlurAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<EdgeDetectionEffectMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Mode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetMode(
        &self,
        value: EdgeDetectionEffectMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn OverlayEdges(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OverlayEdges)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOverlayEdges(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOverlayEdges)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaMode(&self) -> ::windows::core::Result<super::CanvasAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaMode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAlphaMode(
        &self,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for EdgeDetectionEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EdgeDetectionEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EdgeDetectionEffect {}
impl ::core::fmt::Debug for EdgeDetectionEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EdgeDetectionEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EdgeDetectionEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect;{69f6cf3a-f38f-5a88-974a-29390b957e5c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EdgeDetectionEffect {
    type Vtable = IEdgeDetectionEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for EdgeDetectionEffect {
    const IID: ::windows::core::GUID = <IEdgeDetectionEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EdgeDetectionEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect";
}
::windows::core::interface_hierarchy!(
    EdgeDetectionEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<EdgeDetectionEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&EdgeDetectionEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<EdgeDetectionEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&EdgeDetectionEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<EdgeDetectionEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<EdgeDetectionEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<EdgeDetectionEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EdgeDetectionEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EdgeDetectionEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for EdgeDetectionEffect {}
unsafe impl ::core::marker::Sync for EdgeDetectionEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct EffectTransferTable3D(::windows::core::IUnknown);
impl EffectTransferTable3D {
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Device(&self) -> ::windows::core::Result<super::CanvasDevice> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Device)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn CreateFromColors<P0, E0>(
        resourcecreator: P0,
        colors: &[::windows::UI::Color],
        sizeb: i32,
        sizeg: i32,
        sizer: i32,
    ) -> ::windows::core::Result<EffectTransferTable3D>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        Self::IEffectTransferTable3DStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CreateFromColors)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    colors.len() as u32,
                    colors.as_ptr(),
                    sizeb,
                    sizeg,
                    sizer,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    ///*Required features: `"Graphics_DirectX"`*
    #[cfg(feature = "Graphics_DirectX")]
    pub fn CreateFromBytes<P0, E0>(
        resourcecreator: P0,
        bytes: &[u8],
        sizeb: i32,
        sizeg: i32,
        sizer: i32,
        format: ::windows::Graphics::DirectX::DirectXPixelFormat,
    ) -> ::windows::core::Result<EffectTransferTable3D>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        Self::IEffectTransferTable3DStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CreateFromBytes)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    bytes.len() as u32,
                    bytes.as_ptr(),
                    sizeb,
                    sizeg,
                    sizer,
                    format,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IEffectTransferTable3DStatics<
        R,
        F: FnOnce(&IEffectTransferTable3DStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EffectTransferTable3D,
            IEffectTransferTable3DStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for EffectTransferTable3D {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EffectTransferTable3D {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EffectTransferTable3D {}
impl ::core::fmt::Debug for EffectTransferTable3D {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EffectTransferTable3D").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EffectTransferTable3D {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D;{7af06b86-2c45-49c8-8f44-e15a6d4fa44e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EffectTransferTable3D {
    type Vtable = IEffectTransferTable3D_Vtbl;
}
unsafe impl ::windows::core::Interface for EffectTransferTable3D {
    const IID: ::windows::core::GUID = <IEffectTransferTable3D as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EffectTransferTable3D {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D";
}
::windows::core::interface_hierarchy!(
    EffectTransferTable3D,::windows::core::IUnknown,::windows::core::IInspectable
);
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<EffectTransferTable3D>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: EffectTransferTable3D) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&EffectTransferTable3D>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &EffectTransferTable3D) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&EffectTransferTable3D>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EffectTransferTable3D) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for EffectTransferTable3D {}
unsafe impl ::core::marker::Sync for EffectTransferTable3D {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct EmbossEffect(::windows::core::IUnknown);
impl EmbossEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            EmbossEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Amount)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Angle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Angle)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAngle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for EmbossEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for EmbossEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for EmbossEffect {}
impl ::core::fmt::Debug for EmbossEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EmbossEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EmbossEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.EmbossEffect;{617bff35-481c-5596-aba5-00a162349d7b})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for EmbossEffect {
    type Vtable = IEmbossEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for EmbossEffect {
    const IID: ::windows::core::GUID = <IEmbossEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for EmbossEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.EmbossEffect";
}
::windows::core::interface_hierarchy!(
    EmbossEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<EmbossEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: EmbossEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&EmbossEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<EmbossEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: EmbossEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&EmbossEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<EmbossEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: EmbossEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&EmbossEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<EmbossEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: EmbossEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<EmbossEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: EmbossEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&EmbossEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &EmbossEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for EmbossEffect {}
unsafe impl ::core::marker::Sync for EmbossEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ExposureEffect(::windows::core::IUnknown);
impl ExposureEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ExposureEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn Exposure(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Exposure)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetExposure(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetExposure)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ExposureEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ExposureEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ExposureEffect {}
impl ::core::fmt::Debug for ExposureEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ExposureEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ExposureEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ExposureEffect;{b9e20a03-2232-5fd3-b408-15784b79dbb0})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ExposureEffect {
    type Vtable = IExposureEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ExposureEffect {
    const IID: ::windows::core::GUID = <IExposureEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ExposureEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ExposureEffect";
}
::windows::core::interface_hierarchy!(
    ExposureEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ExposureEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ExposureEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExposureEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ExposureEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ExposureEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ExposureEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ExposureEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ExposureEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ExposureEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ExposureEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ExposureEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ExposureEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ExposureEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ExposureEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ExposureEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ExposureEffect {}
unsafe impl ::core::marker::Sync for ExposureEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct GammaTransferEffect(::windows::core::IUnknown);
impl GammaTransferEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            GammaTransferEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn RedAmplitude(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedAmplitude)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedAmplitude(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedAmplitude)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn RedExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn RedOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedOffset)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetRedOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn RedDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenAmplitude(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenAmplitude)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenAmplitude(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenAmplitude)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueAmplitude(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueAmplitude)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueAmplitude(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueAmplitude)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaAmplitude(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaAmplitude)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaAmplitude(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaAmplitude)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for GammaTransferEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for GammaTransferEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GammaTransferEffect {}
impl ::core::fmt::Debug for GammaTransferEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GammaTransferEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for GammaTransferEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.GammaTransferEffect;{b4576b6b-6c3e-534a-8576-d46df4fce93d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for GammaTransferEffect {
    type Vtable = IGammaTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for GammaTransferEffect {
    const IID: ::windows::core::GUID = <IGammaTransferEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for GammaTransferEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.GammaTransferEffect";
}
::windows::core::interface_hierarchy!(
    GammaTransferEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<GammaTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&GammaTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<GammaTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&GammaTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<GammaTransferEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<GammaTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<GammaTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GammaTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GammaTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for GammaTransferEffect {}
unsafe impl ::core::marker::Sync for GammaTransferEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct GaussianBlurEffect(::windows::core::IUnknown);
impl GaussianBlurEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            GaussianBlurEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    pub fn BlurAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlurAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlurAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlurAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Optimization(&self) -> ::windows::core::Result<EffectOptimization> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Optimization)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOptimization(
        &self,
        value: EffectOptimization,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOptimization)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for GaussianBlurEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for GaussianBlurEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GaussianBlurEffect {}
impl ::core::fmt::Debug for GaussianBlurEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GaussianBlurEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for GaussianBlurEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect;{a82ec394-6734-5830-9123-2c82b27dd3c0})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for GaussianBlurEffect {
    type Vtable = IGaussianBlurEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for GaussianBlurEffect {
    const IID: ::windows::core::GUID = <IGaussianBlurEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for GaussianBlurEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect";
}
::windows::core::interface_hierarchy!(
    GaussianBlurEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<GaussianBlurEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&GaussianBlurEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<GaussianBlurEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&GaussianBlurEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<GaussianBlurEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&GaussianBlurEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<GaussianBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<GaussianBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GaussianBlurEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GaussianBlurEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for GaussianBlurEffect {}
unsafe impl ::core::marker::Sync for GaussianBlurEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct GrayscaleEffect(::windows::core::IUnknown);
impl GrayscaleEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            GrayscaleEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for GrayscaleEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for GrayscaleEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for GrayscaleEffect {}
impl ::core::fmt::Debug for GrayscaleEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("GrayscaleEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for GrayscaleEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.GrayscaleEffect;{78e13b83-0638-53f8-b0b3-5b0b320a9ad2})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for GrayscaleEffect {
    type Vtable = IGrayscaleEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for GrayscaleEffect {
    const IID: ::windows::core::GUID = <IGrayscaleEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for GrayscaleEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.GrayscaleEffect";
}
::windows::core::interface_hierarchy!(
    GrayscaleEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<GrayscaleEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&GrayscaleEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<GrayscaleEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&GrayscaleEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<GrayscaleEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&GrayscaleEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<GrayscaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<GrayscaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&GrayscaleEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &GrayscaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for GrayscaleEffect {}
unsafe impl ::core::marker::Sync for GrayscaleEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct HdrToneMapEffect(::windows::core::IUnknown);
impl HdrToneMapEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            HdrToneMapEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn InputMaxLuminance(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InputMaxLuminance)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInputMaxLuminance(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInputMaxLuminance)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn OutputMaxLuminance(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OutputMaxLuminance)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOutputMaxLuminance(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOutputMaxLuminance)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn DisplayMode(&self) -> ::windows::core::Result<HdrToneMapEffectDisplayMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .DisplayMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetDisplayMode(
        &self,
        value: HdrToneMapEffectDisplayMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetDisplayMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsSupported() -> ::windows::core::Result<bool> {
        Self::IHdrToneMapEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IHdrToneMapEffectStatics<
        R,
        F: FnOnce(&IHdrToneMapEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            HdrToneMapEffect,
            IHdrToneMapEffectStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for HdrToneMapEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for HdrToneMapEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HdrToneMapEffect {}
impl ::core::fmt::Debug for HdrToneMapEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HdrToneMapEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for HdrToneMapEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect;{2004faac-663e-5df4-b4cd-a5afbfd9341f})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for HdrToneMapEffect {
    type Vtable = IHdrToneMapEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for HdrToneMapEffect {
    const IID: ::windows::core::GUID = <IHdrToneMapEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for HdrToneMapEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.HdrToneMapEffect";
}
::windows::core::interface_hierarchy!(
    HdrToneMapEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<HdrToneMapEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HdrToneMapEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<HdrToneMapEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HdrToneMapEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<HdrToneMapEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HdrToneMapEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HdrToneMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HdrToneMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HdrToneMapEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HdrToneMapEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for HdrToneMapEffect {}
unsafe impl ::core::marker::Sync for HdrToneMapEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct HighlightsAndShadowsEffect(::windows::core::IUnknown);
impl HighlightsAndShadowsEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            HighlightsAndShadowsEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Highlights(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Highlights)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHighlights(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHighlights)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Shadows(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Shadows)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetShadows(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetShadows)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Clarity(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Clarity)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetClarity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClarity)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaskBlurAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .MaskBlurAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetMaskBlurAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMaskBlurAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SourceIsLinearGamma(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceIsLinearGamma)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSourceIsLinearGamma(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceIsLinearGamma)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for HighlightsAndShadowsEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for HighlightsAndShadowsEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HighlightsAndShadowsEffect {}
impl ::core::fmt::Debug for HighlightsAndShadowsEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HighlightsAndShadowsEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for HighlightsAndShadowsEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect;{7f90be14-267e-5088-bc36-2e0aad869b52})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for HighlightsAndShadowsEffect {
    type Vtable = IHighlightsAndShadowsEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for HighlightsAndShadowsEffect {
    const IID: ::windows::core::GUID = <IHighlightsAndShadowsEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for HighlightsAndShadowsEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect";
}
::windows::core::interface_hierarchy!(
    HighlightsAndShadowsEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<HighlightsAndShadowsEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<HighlightsAndShadowsEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<HighlightsAndShadowsEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HighlightsAndShadowsEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HighlightsAndShadowsEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HighlightsAndShadowsEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HighlightsAndShadowsEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for HighlightsAndShadowsEffect {}
unsafe impl ::core::marker::Sync for HighlightsAndShadowsEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct HueRotationEffect(::windows::core::IUnknown);
impl HueRotationEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            HueRotationEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Angle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Angle)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAngle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for HueRotationEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for HueRotationEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HueRotationEffect {}
impl ::core::fmt::Debug for HueRotationEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HueRotationEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for HueRotationEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.HueRotationEffect;{c172ebf2-e35f-58ae-ad2c-561eceaf2694})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for HueRotationEffect {
    type Vtable = IHueRotationEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for HueRotationEffect {
    const IID: ::windows::core::GUID = <IHueRotationEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for HueRotationEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.HueRotationEffect";
}
::windows::core::interface_hierarchy!(
    HueRotationEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<HueRotationEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HueRotationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HueRotationEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<HueRotationEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: HueRotationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HueRotationEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<HueRotationEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: HueRotationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HueRotationEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HueRotationEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HueRotationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HueRotationEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: HueRotationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueRotationEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueRotationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for HueRotationEffect {}
unsafe impl ::core::marker::Sync for HueRotationEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct HueToRgbEffect(::windows::core::IUnknown);
impl HueToRgbEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            HueToRgbEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn SourceColorSpace(&self) -> ::windows::core::Result<EffectHueColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceColorSpace)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSourceColorSpace(
        &self,
        value: EffectHueColorSpace,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceColorSpace)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for HueToRgbEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for HueToRgbEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for HueToRgbEffect {}
impl ::core::fmt::Debug for HueToRgbEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HueToRgbEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for HueToRgbEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.HueToRgbEffect;{1e97c12c-b743-53d0-88c4-8435272b0a3d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for HueToRgbEffect {
    type Vtable = IHueToRgbEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for HueToRgbEffect {
    const IID: ::windows::core::GUID = <IHueToRgbEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for HueToRgbEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.HueToRgbEffect";
}
::windows::core::interface_hierarchy!(
    HueToRgbEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<HueToRgbEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HueToRgbEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<HueToRgbEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&HueToRgbEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<HueToRgbEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HueToRgbEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HueToRgbEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<HueToRgbEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&HueToRgbEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &HueToRgbEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for HueToRgbEffect {}
unsafe impl ::core::marker::Sync for HueToRgbEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct InvertEffect(::windows::core::IUnknown);
impl InvertEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            InvertEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for InvertEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for InvertEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for InvertEffect {}
impl ::core::fmt::Debug for InvertEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("InvertEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for InvertEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.InvertEffect;{d4adcdfc-0f60-524d-936a-7f2736ad33d8})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for InvertEffect {
    type Vtable = IInvertEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for InvertEffect {
    const IID: ::windows::core::GUID = <IInvertEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for InvertEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.InvertEffect";
}
::windows::core::interface_hierarchy!(
    InvertEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<InvertEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: InvertEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InvertEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<InvertEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: InvertEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&InvertEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<InvertEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: InvertEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&InvertEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<InvertEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: InvertEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<InvertEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: InvertEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&InvertEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &InvertEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for InvertEffect {}
unsafe impl ::core::marker::Sync for InvertEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct LinearTransferEffect(::windows::core::IUnknown);
impl LinearTransferEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            LinearTransferEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn RedOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedOffset)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetRedOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn RedSlope(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedSlope)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetRedSlope(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedSlope)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn RedDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenSlope(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenSlope)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenSlope(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenSlope)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueSlope(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueSlope)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetBlueSlope(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueSlope)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaOffset(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaOffset(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaSlope(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaSlope)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaSlope(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaSlope)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for LinearTransferEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LinearTransferEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LinearTransferEffect {}
impl ::core::fmt::Debug for LinearTransferEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LinearTransferEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LinearTransferEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.LinearTransferEffect;{43d27ad0-8937-5fdb-876a-4e91cb47540c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LinearTransferEffect {
    type Vtable = ILinearTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for LinearTransferEffect {
    const IID: ::windows::core::GUID = <ILinearTransferEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LinearTransferEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.LinearTransferEffect";
}
::windows::core::interface_hierarchy!(
    LinearTransferEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<LinearTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LinearTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<LinearTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LinearTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<LinearTransferEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<LinearTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<LinearTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LinearTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LinearTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for LinearTransferEffect {}
unsafe impl ::core::marker::Sync for LinearTransferEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct LuminanceToAlphaEffect(::windows::core::IUnknown);
impl LuminanceToAlphaEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            LuminanceToAlphaEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for LuminanceToAlphaEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for LuminanceToAlphaEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for LuminanceToAlphaEffect {}
impl ::core::fmt::Debug for LuminanceToAlphaEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("LuminanceToAlphaEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for LuminanceToAlphaEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect;{22364900-ac51-5bd3-8bd2-d626fc9a65f9})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for LuminanceToAlphaEffect {
    type Vtable = ILuminanceToAlphaEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for LuminanceToAlphaEffect {
    const IID: ::windows::core::GUID = <ILuminanceToAlphaEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for LuminanceToAlphaEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect";
}
::windows::core::interface_hierarchy!(
    LuminanceToAlphaEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<LuminanceToAlphaEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<LuminanceToAlphaEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<LuminanceToAlphaEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<LuminanceToAlphaEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<LuminanceToAlphaEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&LuminanceToAlphaEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &LuminanceToAlphaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for LuminanceToAlphaEffect {}
unsafe impl ::core::marker::Sync for LuminanceToAlphaEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct MorphologyEffect(::windows::core::IUnknown);
impl MorphologyEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            MorphologyEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Mode(&self) -> ::windows::core::Result<MorphologyEffectMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Mode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetMode(&self, value: MorphologyEffectMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Width(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Width)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetWidth(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetWidth)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Height(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Height)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetHeight(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeight)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for MorphologyEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for MorphologyEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for MorphologyEffect {}
impl ::core::fmt::Debug for MorphologyEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MorphologyEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for MorphologyEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.MorphologyEffect;{ff065fdb-62c8-5808-921e-49efa43a3d34})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for MorphologyEffect {
    type Vtable = IMorphologyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for MorphologyEffect {
    const IID: ::windows::core::GUID = <IMorphologyEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for MorphologyEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.MorphologyEffect";
}
::windows::core::interface_hierarchy!(
    MorphologyEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<MorphologyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: MorphologyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&MorphologyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<MorphologyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: MorphologyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&MorphologyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<MorphologyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: MorphologyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&MorphologyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<MorphologyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: MorphologyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<MorphologyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: MorphologyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&MorphologyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &MorphologyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for MorphologyEffect {}
unsafe impl ::core::marker::Sync for MorphologyEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct OpacityEffect(::windows::core::IUnknown);
impl OpacityEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            OpacityEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Opacity(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Opacity)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetOpacity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOpacity)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsSupported() -> ::windows::core::Result<bool> {
        Self::IOpacityEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IOpacityEffectStatics<
        R,
        F: FnOnce(&IOpacityEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            OpacityEffect,
            IOpacityEffectStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for OpacityEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for OpacityEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for OpacityEffect {}
impl ::core::fmt::Debug for OpacityEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("OpacityEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for OpacityEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.OpacityEffect;{94b6ad75-c540-51b8-a9d1-544174adc68d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for OpacityEffect {
    type Vtable = IOpacityEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for OpacityEffect {
    const IID: ::windows::core::GUID = <IOpacityEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for OpacityEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.OpacityEffect";
}
::windows::core::interface_hierarchy!(
    OpacityEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<OpacityEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&OpacityEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<OpacityEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&OpacityEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<OpacityEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&OpacityEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<OpacityEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<OpacityEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for OpacityEffect {}
unsafe impl ::core::marker::Sync for OpacityEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct OpacityMetadataEffect(::windows::core::IUnknown);
impl OpacityMetadataEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            OpacityMetadataEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn OpaqueRectangle(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OpaqueRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetOpaqueRectangle(
        &self,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOpaqueRectangle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for OpacityMetadataEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for OpacityMetadataEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for OpacityMetadataEffect {}
impl ::core::fmt::Debug for OpacityMetadataEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("OpacityMetadataEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for OpacityMetadataEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect;{099f3299-9b0a-5ed3-b044-4a6fc96f8362})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for OpacityMetadataEffect {
    type Vtable = IOpacityMetadataEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for OpacityMetadataEffect {
    const IID: ::windows::core::GUID = <IOpacityMetadataEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for OpacityMetadataEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect";
}
::windows::core::interface_hierarchy!(
    OpacityMetadataEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<OpacityMetadataEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&OpacityMetadataEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<OpacityMetadataEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&OpacityMetadataEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<OpacityMetadataEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<OpacityMetadataEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<OpacityMetadataEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&OpacityMetadataEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &OpacityMetadataEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for OpacityMetadataEffect {}
unsafe impl ::core::marker::Sync for OpacityMetadataEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct PixelShaderEffect(::windows::core::IUnknown);
impl PixelShaderEffect {
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Collections"`*
    #[cfg(feature = "Foundation_Collections")]
    pub fn Properties(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::Collections::IMap::<
            ::windows::core::HSTRING,
            ::windows::core::IInspectable,
        >,
    > {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Properties)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source1(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source2(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source3(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source3)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source4(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source4)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source5(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source5)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source6(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source6)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source7(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source7)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source8(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source8)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource1<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource2<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource3<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource3)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource4<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource4)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource5<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource5)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource6<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource6)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource7<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource7)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource8<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource8)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn Source1Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source2Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source3Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source3Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source4Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source4Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source5Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source5Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source6Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source6Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source7Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source7Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source8Mapping(&self) -> ::windows::core::Result<SamplerCoordinateMapping> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source8Mapping)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSource1Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource2Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource3Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource3Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource4Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource4Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource5Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource5Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource6Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource6Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource7Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource7Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource8Mapping(
        &self,
        value: SamplerCoordinateMapping,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource8Mapping)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Source1BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source2BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source3BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source3BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source4BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source4BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source5BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source5BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source6BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source6BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source7BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source7BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source8BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source8BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSource1BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource2BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource3BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource3BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource4BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource4BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource5BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource5BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource6BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource6BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource7BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource7BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource8BorderMode(
        &self,
        value: EffectBorderMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource8BorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaxSamplerOffset(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .MaxSamplerOffset)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetMaxSamplerOffset(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMaxSamplerOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Source1Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source1Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source2Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source2Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source3Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source3Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source4Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source4Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source5Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source5Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source6Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source6Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source7Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source7Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Source8Interpolation(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source8Interpolation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSource1Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource1Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource2Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource2Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource3Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource3Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource4Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource4Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource5Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource5Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource6Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource6Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource7Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource7Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SetSource8Interpolation(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource8Interpolation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn IsSupported(
        &self,
        device: &super::CanvasDevice,
    ) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(device),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn Create(shadercode: &[u8]) -> ::windows::core::Result<PixelShaderEffect> {
        Self::IPixelShaderEffectFactory(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Create)(
                    ::windows::core::Vtable::as_raw(this),
                    shadercode.len() as u32,
                    shadercode.as_ptr(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IPixelShaderEffectFactory<
        R,
        F: FnOnce(&IPixelShaderEffectFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PixelShaderEffect,
            IPixelShaderEffectFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for PixelShaderEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PixelShaderEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PixelShaderEffect {}
impl ::core::fmt::Debug for PixelShaderEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PixelShaderEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PixelShaderEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.PixelShaderEffect;{fc8c3c31-fa96-45e2-8b72-1741c65cee8e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PixelShaderEffect {
    type Vtable = IPixelShaderEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for PixelShaderEffect {
    const IID: ::windows::core::GUID = <IPixelShaderEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PixelShaderEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.PixelShaderEffect";
}
::windows::core::interface_hierarchy!(
    PixelShaderEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PixelShaderEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PixelShaderEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PixelShaderEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PixelShaderEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<PixelShaderEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PixelShaderEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PixelShaderEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PixelShaderEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PixelShaderEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PixelShaderEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct PointDiffuseEffect(::windows::core::IUnknown);
impl PointDiffuseEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointDiffuseEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightPosition(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightPosition)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightPosition(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightPosition)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn DiffuseAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .DiffuseAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetDiffuseAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetDiffuseAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn LightColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetLightColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn HeightMapKernelSize(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapKernelSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetHeightMapKernelSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapKernelSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for PointDiffuseEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointDiffuseEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointDiffuseEffect {}
impl ::core::fmt::Debug for PointDiffuseEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointDiffuseEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointDiffuseEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect;{6cce09ec-f847-5661-af4b-531dd3dd7d6e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointDiffuseEffect {
    type Vtable = IPointDiffuseEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for PointDiffuseEffect {
    const IID: ::windows::core::GUID = <IPointDiffuseEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointDiffuseEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect";
}
::windows::core::interface_hierarchy!(
    PointDiffuseEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PointDiffuseEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointDiffuseEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PointDiffuseEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointDiffuseEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<PointDiffuseEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PointDiffuseEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PointDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PointDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointDiffuseEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for PointDiffuseEffect {}
unsafe impl ::core::marker::Sync for PointDiffuseEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct PointSpecularEffect(::windows::core::IUnknown);
impl PointSpecularEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PointSpecularEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightPosition(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightPosition)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightPosition(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightPosition)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SpecularExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SpecularExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSpecularExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSpecularExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SpecularAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SpecularAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSpecularAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSpecularAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn LightColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetLightColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn HeightMapKernelSize(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapKernelSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetHeightMapKernelSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapKernelSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for PointSpecularEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PointSpecularEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PointSpecularEffect {}
impl ::core::fmt::Debug for PointSpecularEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PointSpecularEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PointSpecularEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.PointSpecularEffect;{ec8afe9b-8501-5286-a43c-1afff7420ad6})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PointSpecularEffect {
    type Vtable = IPointSpecularEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for PointSpecularEffect {
    const IID: ::windows::core::GUID = <IPointSpecularEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PointSpecularEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.PointSpecularEffect";
}
::windows::core::interface_hierarchy!(
    PointSpecularEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PointSpecularEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointSpecularEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PointSpecularEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PointSpecularEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<PointSpecularEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PointSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PointSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PointSpecularEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PointSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for PointSpecularEffect {}
unsafe impl ::core::marker::Sync for PointSpecularEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct PosterizeEffect(::windows::core::IUnknown);
impl PosterizeEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PosterizeEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn RedValueCount(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedValueCount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedValueCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedValueCount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenValueCount(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenValueCount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenValueCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenValueCount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueValueCount(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueValueCount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueValueCount(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueValueCount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for PosterizeEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PosterizeEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PosterizeEffect {}
impl ::core::fmt::Debug for PosterizeEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PosterizeEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PosterizeEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.PosterizeEffect;{2f631a3b-c89a-507c-9756-299b61434fa4})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PosterizeEffect {
    type Vtable = IPosterizeEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for PosterizeEffect {
    const IID: ::windows::core::GUID = <IPosterizeEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PosterizeEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.PosterizeEffect";
}
::windows::core::interface_hierarchy!(
    PosterizeEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PosterizeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PosterizeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PosterizeEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PosterizeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: PosterizeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PosterizeEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<PosterizeEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PosterizeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PosterizeEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PosterizeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PosterizeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PosterizeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: PosterizeEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PosterizeEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PosterizeEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for PosterizeEffect {}
unsafe impl ::core::marker::Sync for PosterizeEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct PremultiplyEffect(::windows::core::IUnknown);
impl PremultiplyEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            PremultiplyEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for PremultiplyEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for PremultiplyEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for PremultiplyEffect {}
impl ::core::fmt::Debug for PremultiplyEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("PremultiplyEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for PremultiplyEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.PremultiplyEffect;{d29a9d1e-bd57-5f3e-9ae0-009c6ac5b06d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for PremultiplyEffect {
    type Vtable = IPremultiplyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for PremultiplyEffect {
    const IID: ::windows::core::GUID = <IPremultiplyEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for PremultiplyEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.PremultiplyEffect";
}
::windows::core::interface_hierarchy!(
    PremultiplyEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<PremultiplyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PremultiplyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<PremultiplyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&PremultiplyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<PremultiplyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PremultiplyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<PremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&PremultiplyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &PremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for PremultiplyEffect {}
unsafe impl ::core::marker::Sync for PremultiplyEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct RgbToHueEffect(::windows::core::IUnknown);
impl RgbToHueEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            RgbToHueEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn OutputColorSpace(&self) -> ::windows::core::Result<EffectHueColorSpace> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OutputColorSpace)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOutputColorSpace(
        &self,
        value: EffectHueColorSpace,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOutputColorSpace)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for RgbToHueEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for RgbToHueEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for RgbToHueEffect {}
impl ::core::fmt::Debug for RgbToHueEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("RgbToHueEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for RgbToHueEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.RgbToHueEffect;{7caeadc6-9eb3-5895-b876-f485c9574847})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for RgbToHueEffect {
    type Vtable = IRgbToHueEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for RgbToHueEffect {
    const IID: ::windows::core::GUID = <IRgbToHueEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for RgbToHueEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.RgbToHueEffect";
}
::windows::core::interface_hierarchy!(
    RgbToHueEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<RgbToHueEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RgbToHueEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<RgbToHueEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&RgbToHueEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<RgbToHueEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&RgbToHueEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<RgbToHueEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<RgbToHueEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&RgbToHueEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &RgbToHueEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for RgbToHueEffect {}
unsafe impl ::core::marker::Sync for RgbToHueEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct SaturationEffect(::windows::core::IUnknown);
impl SaturationEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SaturationEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Saturation(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Saturation)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSaturation(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSaturation)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for SaturationEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SaturationEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SaturationEffect {}
impl ::core::fmt::Debug for SaturationEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SaturationEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SaturationEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.SaturationEffect;{f85a5ed7-7212-57a6-b357-61038961c58d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SaturationEffect {
    type Vtable = ISaturationEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for SaturationEffect {
    const IID: ::windows::core::GUID = <ISaturationEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SaturationEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.SaturationEffect";
}
::windows::core::interface_hierarchy!(
    SaturationEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SaturationEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SaturationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SaturationEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SaturationEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: SaturationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SaturationEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<SaturationEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SaturationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SaturationEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SaturationEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SaturationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SaturationEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: SaturationEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SaturationEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SaturationEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for SaturationEffect {}
unsafe impl ::core::marker::Sync for SaturationEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ScaleEffect(::windows::core::IUnknown);
impl ScaleEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ScaleEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn Scale(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Scale)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetScale(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn CenterPoint(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CenterPoint)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetCenterPoint(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCenterPoint)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn InterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInterpolationMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Sharpness(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Sharpness)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetSharpness(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSharpness)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ScaleEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ScaleEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ScaleEffect {}
impl ::core::fmt::Debug for ScaleEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ScaleEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ScaleEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ScaleEffect;{7522ae90-bec2-512c-bcc0-4d6a97e3ed34})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ScaleEffect {
    type Vtable = IScaleEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ScaleEffect {
    const IID: ::windows::core::GUID = <IScaleEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ScaleEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ScaleEffect";
}
::windows::core::interface_hierarchy!(
    ScaleEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ScaleEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ScaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScaleEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ScaleEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ScaleEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ScaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ScaleEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ScaleEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ScaleEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ScaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ScaleEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ScaleEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ScaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ScaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ScaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ScaleEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ScaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ScaleEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ScaleEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ScaleEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ScaleEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ScaleEffect {}
unsafe impl ::core::marker::Sync for ScaleEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct SepiaEffect(::windows::core::IUnknown);
impl SepiaEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SepiaEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Intensity(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Intensity)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetIntensity(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetIntensity)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaMode(&self) -> ::windows::core::Result<super::CanvasAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaMode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAlphaMode(
        &self,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for SepiaEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SepiaEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SepiaEffect {}
impl ::core::fmt::Debug for SepiaEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SepiaEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SepiaEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.SepiaEffect;{f933471f-a7af-5521-be79-b0da22976cff})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SepiaEffect {
    type Vtable = ISepiaEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for SepiaEffect {
    const IID: ::windows::core::GUID = <ISepiaEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SepiaEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.SepiaEffect";
}
::windows::core::interface_hierarchy!(
    SepiaEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SepiaEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SepiaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SepiaEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SepiaEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SepiaEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: SepiaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SepiaEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SepiaEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<SepiaEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SepiaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SepiaEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SepiaEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SepiaEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SepiaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SepiaEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SepiaEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SepiaEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: SepiaEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SepiaEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SepiaEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SepiaEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for SepiaEffect {}
unsafe impl ::core::marker::Sync for SepiaEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct ShadowEffect(::windows::core::IUnknown);
impl ShadowEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            ShadowEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn BlurAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlurAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlurAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlurAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn ShadowColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ShadowColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetShadowColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetShadowColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Optimization(&self) -> ::windows::core::Result<EffectOptimization> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Optimization)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOptimization(
        &self,
        value: EffectOptimization,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOptimization)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn ShadowColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ShadowColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetShadowColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetShadowColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for ShadowEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ShadowEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ShadowEffect {}
impl ::core::fmt::Debug for ShadowEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ShadowEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ShadowEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.ShadowEffect;{3947c621-78da-5489-9927-be655f4576e2})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for ShadowEffect {
    type Vtable = IShadowEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for ShadowEffect {
    const IID: ::windows::core::GUID = <IShadowEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for ShadowEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.ShadowEffect";
}
::windows::core::interface_hierarchy!(
    ShadowEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<ShadowEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ShadowEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ShadowEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<ShadowEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: ShadowEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&ShadowEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<ShadowEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: ShadowEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ShadowEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ShadowEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: ShadowEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<ShadowEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: ShadowEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&ShadowEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &ShadowEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for ShadowEffect {}
unsafe impl ::core::marker::Sync for ShadowEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct SharpenEffect(::windows::core::IUnknown);
impl SharpenEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SharpenEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Amount)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Threshold(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Threshold)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetThreshold(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetThreshold)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for SharpenEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SharpenEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SharpenEffect {}
impl ::core::fmt::Debug for SharpenEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SharpenEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SharpenEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.SharpenEffect;{7efef0a1-7578-5f62-8364-46145674ef7e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SharpenEffect {
    type Vtable = ISharpenEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for SharpenEffect {
    const IID: ::windows::core::GUID = <ISharpenEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SharpenEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.SharpenEffect";
}
::windows::core::interface_hierarchy!(
    SharpenEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SharpenEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SharpenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SharpenEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SharpenEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: SharpenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SharpenEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<SharpenEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SharpenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SharpenEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SharpenEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SharpenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SharpenEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: SharpenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SharpenEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SharpenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for SharpenEffect {}
unsafe impl ::core::marker::Sync for SharpenEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct SpotDiffuseEffect(::windows::core::IUnknown);
impl SpotDiffuseEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SpotDiffuseEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightPosition(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightPosition)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightPosition(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightPosition)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightTarget(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightTarget)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightTarget(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightTarget)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Focus(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Focus)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetFocus(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetFocus)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn LimitingConeAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LimitingConeAngle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetLimitingConeAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLimitingConeAngle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn DiffuseAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .DiffuseAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetDiffuseAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetDiffuseAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn LightColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetLightColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn HeightMapKernelSize(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapKernelSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetHeightMapKernelSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapKernelSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for SpotDiffuseEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpotDiffuseEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpotDiffuseEffect {}
impl ::core::fmt::Debug for SpotDiffuseEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpotDiffuseEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpotDiffuseEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect;{b3dcbe44-1dd7-5cb3-95e5-a48974cd12e8})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpotDiffuseEffect {
    type Vtable = ISpotDiffuseEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for SpotDiffuseEffect {
    const IID: ::windows::core::GUID = <ISpotDiffuseEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpotDiffuseEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect";
}
::windows::core::interface_hierarchy!(
    SpotDiffuseEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpotDiffuseEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpotDiffuseEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpotDiffuseEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpotDiffuseEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<SpotDiffuseEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SpotDiffuseEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SpotDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SpotDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotDiffuseEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotDiffuseEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for SpotDiffuseEffect {}
unsafe impl ::core::marker::Sync for SpotDiffuseEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct SpotSpecularEffect(::windows::core::IUnknown);
impl SpotSpecularEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            SpotSpecularEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightPosition(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightPosition)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightPosition(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightPosition)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightTarget(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector3> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightTarget)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightTarget(
        &self,
        value: ::windows::Foundation::Numerics::Vector3,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightTarget)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Focus(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Focus)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetFocus(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetFocus)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn LimitingConeAngle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LimitingConeAngle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetLimitingConeAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLimitingConeAngle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SpecularExponent(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SpecularExponent)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSpecularExponent(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSpecularExponent)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn SpecularAmount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SpecularAmount)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetSpecularAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSpecularAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapScale(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapScale)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapScale(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapScale)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn LightColor(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColor)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetLightColor(
        &self,
        value: ::windows::UI::Color,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn HeightMapKernelSize(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapKernelSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetHeightMapKernelSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapKernelSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn HeightMapInterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .HeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetHeightMapInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetHeightMapInterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    value,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn LightColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .LightColorHdr)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetLightColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetLightColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for SpotSpecularEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for SpotSpecularEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for SpotSpecularEffect {}
impl ::core::fmt::Debug for SpotSpecularEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SpotSpecularEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SpotSpecularEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect;{83ae4cd0-80aa-5783-8572-f15e5f85329e})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for SpotSpecularEffect {
    type Vtable = ISpotSpecularEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for SpotSpecularEffect {
    const IID: ::windows::core::GUID = <ISpotSpecularEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for SpotSpecularEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect";
}
::windows::core::interface_hierarchy!(
    SpotSpecularEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<SpotSpecularEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpotSpecularEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<SpotSpecularEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&SpotSpecularEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<SpotSpecularEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SpotSpecularEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SpotSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<SpotSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&SpotSpecularEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &SpotSpecularEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for SpotSpecularEffect {}
unsafe impl ::core::marker::Sync for SpotSpecularEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct StraightenEffect(::windows::core::IUnknown);
impl StraightenEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            StraightenEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Angle(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Angle)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAngle(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAngle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn MaintainSize(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .MaintainSize)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetMaintainSize(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetMaintainSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn InterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInterpolationMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for StraightenEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for StraightenEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for StraightenEffect {}
impl ::core::fmt::Debug for StraightenEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("StraightenEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for StraightenEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.StraightenEffect;{965fc262-2eba-59e6-935f-2389cb5a305a})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for StraightenEffect {
    type Vtable = IStraightenEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for StraightenEffect {
    const IID: ::windows::core::GUID = <IStraightenEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for StraightenEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.StraightenEffect";
}
::windows::core::interface_hierarchy!(
    StraightenEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<StraightenEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: StraightenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&StraightenEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<StraightenEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: StraightenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&StraightenEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<StraightenEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: StraightenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&StraightenEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<StraightenEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: StraightenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<StraightenEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: StraightenEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&StraightenEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &StraightenEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for StraightenEffect {}
unsafe impl ::core::marker::Sync for StraightenEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct TableTransfer3DEffect(::windows::core::IUnknown);
impl TableTransfer3DEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TableTransfer3DEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Table(&self) -> ::windows::core::Result<EffectTransferTable3D> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Table)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetTable(
        &self,
        value: &EffectTransferTable3D,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(value),
                )
                .ok()
        }
    }
    pub fn AlphaMode(&self) -> ::windows::core::Result<super::CanvasAlphaMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaMode)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAlphaMode(
        &self,
        value: super::CanvasAlphaMode,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for TableTransfer3DEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TableTransfer3DEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TableTransfer3DEffect {}
impl ::core::fmt::Debug for TableTransfer3DEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TableTransfer3DEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TableTransfer3DEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect;{ef09c6e0-9437-53f7-b7b4-b53c79a0bc37})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TableTransfer3DEffect {
    type Vtable = ITableTransfer3DEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for TableTransfer3DEffect {
    const IID: ::windows::core::GUID = <ITableTransfer3DEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TableTransfer3DEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect";
}
::windows::core::interface_hierarchy!(
    TableTransfer3DEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TableTransfer3DEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TableTransfer3DEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TableTransfer3DEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TableTransfer3DEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<TableTransfer3DEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TableTransfer3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TableTransfer3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransfer3DEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransfer3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TableTransfer3DEffect {}
unsafe impl ::core::marker::Sync for TableTransfer3DEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct TableTransferEffect(::windows::core::IUnknown);
impl TableTransferEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TableTransferEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn RedTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetRedTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn RedDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .RedDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetRedDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetRedDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn GreenTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetGreenTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn GreenDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GreenDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetGreenDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetGreenDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BlueTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetBlueTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn BlueDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BlueDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBlueDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBlueDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn AlphaTable(&self) -> ::windows::core::Result<::windows::core::Array<f32>> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaTable)(
                    ::windows::core::Vtable::as_raw(this),
                    ::windows::core::Array::<
                        f32,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    pub fn SetAlphaTable(&self, valueelements: &[f32]) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaTable)(
                    ::windows::core::Vtable::as_raw(this),
                    valueelements.len() as u32,
                    valueelements.as_ptr(),
                )
                .ok()
        }
    }
    pub fn AlphaDisable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .AlphaDisable)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetAlphaDisable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAlphaDisable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for TableTransferEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TableTransferEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TableTransferEffect {}
impl ::core::fmt::Debug for TableTransferEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TableTransferEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TableTransferEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.TableTransferEffect;{bf0b63b6-fe77-5198-a2a1-3fb80c268b8f})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TableTransferEffect {
    type Vtable = ITableTransferEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for TableTransferEffect {
    const IID: ::windows::core::GUID = <ITableTransferEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TableTransferEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.TableTransferEffect";
}
::windows::core::interface_hierarchy!(
    TableTransferEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TableTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TableTransferEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TableTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TableTransferEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<TableTransferEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TableTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TableTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: TableTransferEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TableTransferEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TableTransferEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TableTransferEffect {}
unsafe impl ::core::marker::Sync for TableTransferEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct TemperatureAndTintEffect(::windows::core::IUnknown);
impl TemperatureAndTintEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TemperatureAndTintEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn Temperature(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Temperature)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetTemperature(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTemperature)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Tint(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Tint)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetTint(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTint)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for TemperatureAndTintEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TemperatureAndTintEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TemperatureAndTintEffect {}
impl ::core::fmt::Debug for TemperatureAndTintEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TemperatureAndTintEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TemperatureAndTintEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect;{8ae43e02-2619-5d78-8980-4ed569549bd8})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TemperatureAndTintEffect {
    type Vtable = ITemperatureAndTintEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for TemperatureAndTintEffect {
    const IID: ::windows::core::GUID = <ITemperatureAndTintEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TemperatureAndTintEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect";
}
::windows::core::interface_hierarchy!(
    TemperatureAndTintEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TemperatureAndTintEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TemperatureAndTintEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TemperatureAndTintEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TemperatureAndTintEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<TemperatureAndTintEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TemperatureAndTintEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TemperatureAndTintEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TemperatureAndTintEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TemperatureAndTintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TemperatureAndTintEffect {}
unsafe impl ::core::marker::Sync for TemperatureAndTintEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct TileEffect(::windows::core::IUnknown);
impl TileEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TileEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SourceRectangle(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Rect> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .SourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetSourceRectangle(
        &self,
        value: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSourceRectangle)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for TileEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TileEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TileEffect {}
impl ::core::fmt::Debug for TileEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TileEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TileEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.TileEffect;{78a809cb-1154-5ad6-a880-e3a175772815})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TileEffect {
    type Vtable = ITileEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for TileEffect {
    const IID: ::windows::core::GUID = <ITileEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TileEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.TileEffect";
}
::windows::core::interface_hierarchy!(
    TileEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TileEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TileEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TileEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TileEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TileEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: TileEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TileEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TileEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<TileEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: TileEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TileEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TileEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TileEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TileEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TileEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TileEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TileEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: TileEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TileEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TileEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TileEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TileEffect {}
unsafe impl ::core::marker::Sync for TileEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct TintEffect(::windows::core::IUnknown);
impl TintEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TintEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Color)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn ClampOutput(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ClampOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetClampOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetClampOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn ColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ColorHdr)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsSupported() -> ::windows::core::Result<bool> {
        Self::ITintEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn ITintEffectStatics<
        R,
        F: FnOnce(&ITintEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<TintEffect, ITintEffectStatics> = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for TintEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TintEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TintEffect {}
impl ::core::fmt::Debug for TintEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TintEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TintEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.TintEffect;{729a21ea-c61e-5308-9eae-d638aa1f5b8c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TintEffect {
    type Vtable = ITintEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for TintEffect {
    const IID: ::windows::core::GUID = <ITintEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TintEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.TintEffect";
}
::windows::core::interface_hierarchy!(
    TintEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TintEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TintEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TintEffect> for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TintEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: TintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TintEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TintEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<TintEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: TintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TintEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TintEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TintEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TintEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TintEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TintEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: TintEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TintEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TintEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TintEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TintEffect {}
unsafe impl ::core::marker::Sync for TintEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct Transform2DEffect(::windows::core::IUnknown);
impl Transform2DEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            Transform2DEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn InterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInterpolationMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix3x2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .TransformMatrix)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTransformMatrix)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Sharpness(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Sharpness)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetSharpness(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSharpness)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for Transform2DEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Transform2DEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Transform2DEffect {}
impl ::core::fmt::Debug for Transform2DEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Transform2DEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Transform2DEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.Transform2DEffect;{4467d118-33e7-5b1a-87c2-0f1f0497353d})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Transform2DEffect {
    type Vtable = ITransform2DEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for Transform2DEffect {
    const IID: ::windows::core::GUID = <ITransform2DEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Transform2DEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.Transform2DEffect";
}
::windows::core::interface_hierarchy!(
    Transform2DEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Transform2DEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform2DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Transform2DEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Transform2DEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform2DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Transform2DEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<Transform2DEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform2DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&Transform2DEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<Transform2DEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform2DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<Transform2DEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform2DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform2DEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform2DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for Transform2DEffect {}
unsafe impl ::core::marker::Sync for Transform2DEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct Transform3DEffect(::windows::core::IUnknown);
impl Transform3DEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            Transform3DEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn InterpolationMode(
        &self,
    ) -> ::windows::core::Result<super::CanvasImageInterpolation> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InterpolationMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInterpolationMode(
        &self,
        value: super::CanvasImageInterpolation,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInterpolationMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn BorderMode(&self) -> ::windows::core::Result<EffectBorderMode> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BorderMode)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetBorderMode(&self, value: EffectBorderMode) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBorderMode)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn TransformMatrix(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Matrix4x4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .TransformMatrix)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetTransformMatrix(
        &self,
        value: ::windows::Foundation::Numerics::Matrix4x4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTransformMatrix)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for Transform3DEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for Transform3DEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for Transform3DEffect {}
impl ::core::fmt::Debug for Transform3DEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("Transform3DEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for Transform3DEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.Transform3DEffect;{3025ed7f-8f25-5e0b-80c9-56bbdd3e8a10})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for Transform3DEffect {
    type Vtable = ITransform3DEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for Transform3DEffect {
    const IID: ::windows::core::GUID = <ITransform3DEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for Transform3DEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.Transform3DEffect";
}
::windows::core::interface_hierarchy!(
    Transform3DEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<Transform3DEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Transform3DEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<Transform3DEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&Transform3DEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<Transform3DEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&Transform3DEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<Transform3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<Transform3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: Transform3DEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&Transform3DEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &Transform3DEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for Transform3DEffect {}
unsafe impl ::core::marker::Sync for Transform3DEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct TurbulenceEffect(::windows::core::IUnknown);
impl TurbulenceEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            TurbulenceEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn Offset(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Offset)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetOffset(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOffset)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn Size(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Size)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetSize(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSize)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn Frequency(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector2> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Frequency)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetFrequency(
        &self,
        value: ::windows::Foundation::Numerics::Vector2,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetFrequency)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Octaves(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Octaves)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetOctaves(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOctaves)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Seed(&self) -> ::windows::core::Result<i32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Seed)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetSeed(&self, value: i32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSeed)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Noise(&self) -> ::windows::core::Result<TurbulenceEffectNoise> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Noise)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetNoise(&self, value: TurbulenceEffectNoise) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetNoise)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Tileable(&self) -> ::windows::core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Tileable)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetTileable(&self, value: bool) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetTileable)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
}
impl ::core::clone::Clone for TurbulenceEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for TurbulenceEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for TurbulenceEffect {}
impl ::core::fmt::Debug for TurbulenceEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TurbulenceEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TurbulenceEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.TurbulenceEffect;{1cb1b33d-20e9-564b-856e-37e9fa1d0016})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for TurbulenceEffect {
    type Vtable = ITurbulenceEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for TurbulenceEffect {
    const IID: ::windows::core::GUID = <ITurbulenceEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for TurbulenceEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.TurbulenceEffect";
}
::windows::core::interface_hierarchy!(
    TurbulenceEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<TurbulenceEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TurbulenceEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<TurbulenceEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&TurbulenceEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<TurbulenceEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TurbulenceEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TurbulenceEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<TurbulenceEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&TurbulenceEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &TurbulenceEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for TurbulenceEffect {}
unsafe impl ::core::marker::Sync for TurbulenceEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct UnPremultiplyEffect(::windows::core::IUnknown);
impl UnPremultiplyEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            UnPremultiplyEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for UnPremultiplyEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for UnPremultiplyEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for UnPremultiplyEffect {}
impl ::core::fmt::Debug for UnPremultiplyEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("UnPremultiplyEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for UnPremultiplyEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect;{73098bb4-dcf1-5403-af44-3344d2982d40})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for UnPremultiplyEffect {
    type Vtable = IUnPremultiplyEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for UnPremultiplyEffect {
    const IID: ::windows::core::GUID = <IUnPremultiplyEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for UnPremultiplyEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect";
}
::windows::core::interface_hierarchy!(
    UnPremultiplyEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<UnPremultiplyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&UnPremultiplyEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<UnPremultiplyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&UnPremultiplyEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<UnPremultiplyEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<UnPremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<UnPremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&UnPremultiplyEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &UnPremultiplyEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for UnPremultiplyEffect {}
unsafe impl ::core::marker::Sync for UnPremultiplyEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct VignetteEffect(::windows::core::IUnknown);
impl VignetteEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            VignetteEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn Color(&self) -> ::windows::core::Result<::windows::UI::Color> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Color)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"UI"`*
    #[cfg(feature = "UI")]
    pub fn SetColor(&self, value: ::windows::UI::Color) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColor)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Amount(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Amount)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetAmount(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetAmount)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn Curve(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Curve)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    pub fn SetCurve(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCurve)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn ColorHdr(
        &self,
    ) -> ::windows::core::Result<::windows::Foundation::Numerics::Vector4> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .ColorHdr)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn SetColorHdr(
        &self,
        value: ::windows::Foundation::Numerics::Vector4,
    ) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetColorHdr)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
}
impl ::core::clone::Clone for VignetteEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for VignetteEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for VignetteEffect {}
impl ::core::fmt::Debug for VignetteEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("VignetteEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for VignetteEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.VignetteEffect;{574d0f9f-eec7-5989-ac53-135868cf5e0c})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for VignetteEffect {
    type Vtable = IVignetteEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for VignetteEffect {
    const IID: ::windows::core::GUID = <IVignetteEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for VignetteEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.VignetteEffect";
}
::windows::core::interface_hierarchy!(
    VignetteEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<VignetteEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: VignetteEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VignetteEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<VignetteEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: VignetteEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&VignetteEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<VignetteEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: VignetteEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&VignetteEffect> for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<VignetteEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: VignetteEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<VignetteEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: VignetteEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&VignetteEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &VignetteEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for VignetteEffect {}
unsafe impl ::core::marker::Sync for VignetteEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
pub struct WhiteLevelAdjustmentEffect(::windows::core::IUnknown);
impl WhiteLevelAdjustmentEffect {
    pub fn new() -> ::windows::core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&::windows::core::IGenericFactory) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            WhiteLevelAdjustmentEffect,
            ::windows::core::IGenericFactory,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn CacheOutput(&self) -> ::windows::core::Result<bool> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .CacheOutput)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetCacheOutput(&self, value: bool) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetCacheOutput)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn BufferPrecision(
        &self,
    ) -> ::windows::core::Result<
        ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
    > {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .BufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn SetBufferPrecision<P0, E0>(&self, value: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Foundation::IReference::<super::CanvasBufferPrecision>,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetBufferPrecision)(
                    ::windows::core::Vtable::as_raw(this),
                    value.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn InvalidateSourceRectangle<P0, E0>(
        &self,
        resourcecreator: P0,
        sourceindex: u32,
        invalidrectangle: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .InvalidateSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    invalidrectangle,
                )
                .ok()
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetInvalidRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetInvalidRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangle<P0, E0, P1, E1>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffect: P1,
        sourceindex: u32,
        sourcebounds: ::windows::Foundation::Rect,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
        P1: ::std::convert::TryInto<::windows::core::InParam<ICanvasEffect>, Error = E1>,
        E1: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangle)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffect.try_into().map_err(|e| e.into())?.abi(),
                    sourceindex,
                    sourcebounds,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetRequiredSourceRectangles<P0, E0>(
        &self,
        resourcecreator: P0,
        outputrectangle: ::windows::Foundation::Rect,
        sourceeffects: &[::core::option::Option<ICanvasEffect>],
        sourceindices: &[u32],
        sourcebounds: &[::windows::Foundation::Rect],
    ) -> ::windows::core::Result<::windows::core::Array<::windows::Foundation::Rect>>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreatorWithDpi>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<ICanvasEffect>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetRequiredSourceRectangles)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    outputrectangle,
                    sourceeffects.len() as u32,
                    ::core::mem::transmute(sourceeffects.as_ptr()),
                    sourceindices.len() as u32,
                    sourceindices.as_ptr(),
                    sourcebounds.len() as u32,
                    sourcebounds.as_ptr(),
                    ::windows::core::Array::<
                        ::windows::Foundation::Rect,
                    >::set_abi_len(result__.assume_init_mut()),
                    result__.as_mut_ptr() as *mut _ as _,
                )
                .and_then(|| result__.assume_init())
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn GetBounds<P0, E0>(
        &self,
        resourcecreator: P0,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBounds)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation_Numerics"`*
    #[cfg(feature = "Foundation_Numerics")]
    pub fn GetBoundsWithTransform<P0, E0>(
        &self,
        resourcecreator: P0,
        transform: ::windows::Foundation::Numerics::Matrix3x2,
    ) -> ::windows::core::Result<::windows::Foundation::Rect>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<super::ICanvasResourceCreator>,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = &::windows::core::Interface::cast::<super::ICanvasImage>(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .GetBoundsWithTransform)(
                    ::windows::core::Vtable::as_raw(this),
                    resourcecreator.try_into().map_err(|e| e.into())?.abi(),
                    transform,
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    ///*Required features: `"Foundation"`*
    #[cfg(feature = "Foundation")]
    pub fn Close(&self) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Foundation::IClosable,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .Close)(::windows::core::Vtable::as_raw(this))
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Name(&self) -> ::windows::core::Result<::windows::core::HSTRING> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Name)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetName(
        &self,
        name: &::windows::core::HSTRING,
    ) -> ::windows::core::Result<()> {
        let this = &::windows::core::Interface::cast::<
            ::windows::Graphics::Effects::IGraphicsEffect,
        >(self)?;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetName)(
                    ::windows::core::Vtable::as_raw(this),
                    ::core::mem::transmute_copy(name),
                )
                .ok()
        }
    }
    pub fn InputWhiteLevel(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .InputWhiteLevel)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetInputWhiteLevel(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetInputWhiteLevel)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    pub fn OutputWhiteLevel(&self) -> ::windows::core::Result<f32> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .OutputWhiteLevel)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        }
    }
    pub fn SetOutputWhiteLevel(&self, value: f32) -> ::windows::core::Result<()> {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetOutputWhiteLevel)(::windows::core::Vtable::as_raw(this), value)
                .ok()
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn Source(
        &self,
    ) -> ::windows::core::Result<::windows::Graphics::Effects::IGraphicsEffectSource> {
        let this = self;
        unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .Source)(::windows::core::Vtable::as_raw(this), result__.as_mut_ptr())
                .from_abi(result__)
        }
    }
    ///*Required features: `"Graphics_Effects"`*
    #[cfg(feature = "Graphics_Effects")]
    pub fn SetSource<P0, E0>(&self, source: P0) -> ::windows::core::Result<()>
    where
        P0: ::std::convert::TryInto<
            ::windows::core::InParam<
                ::windows::Graphics::Effects::IGraphicsEffectSource,
            >,
            Error = E0,
        >,
        E0: ::std::convert::Into<::windows::core::Error>,
    {
        let this = self;
        unsafe {
            (::windows::core::Vtable::vtable(this)
                .SetSource)(
                    ::windows::core::Vtable::as_raw(this),
                    source.try_into().map_err(|e| e.into())?.abi(),
                )
                .ok()
        }
    }
    pub fn IsSupported() -> ::windows::core::Result<bool> {
        Self::IWhiteLevelAdjustmentEffectStatics(|this| unsafe {
            let mut result__ = ::core::mem::MaybeUninit::zeroed();
            (::windows::core::Vtable::vtable(this)
                .IsSupported)(
                    ::windows::core::Vtable::as_raw(this),
                    result__.as_mut_ptr(),
                )
                .from_abi(result__)
        })
    }
    #[doc(hidden)]
    pub fn IWhiteLevelAdjustmentEffectStatics<
        R,
        F: FnOnce(&IWhiteLevelAdjustmentEffectStatics) -> ::windows::core::Result<R>,
    >(callback: F) -> ::windows::core::Result<R> {
        static SHARED: ::windows::core::FactoryCache<
            WhiteLevelAdjustmentEffect,
            IWhiteLevelAdjustmentEffectStatics,
        > = ::windows::core::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl ::core::clone::Clone for WhiteLevelAdjustmentEffect {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for WhiteLevelAdjustmentEffect {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for WhiteLevelAdjustmentEffect {}
impl ::core::fmt::Debug for WhiteLevelAdjustmentEffect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("WhiteLevelAdjustmentEffect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for WhiteLevelAdjustmentEffect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"rc(Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect;{0b0b945c-96f7-56b4-8317-01de629fc904})",
    );
    type DefaultType = ::core::option::Option<Self>;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        from.as_ref().cloned().ok_or(::windows::core::Error::OK)
    }
}
unsafe impl ::windows::core::Vtable for WhiteLevelAdjustmentEffect {
    type Vtable = IWhiteLevelAdjustmentEffect_Vtbl;
}
unsafe impl ::windows::core::Interface for WhiteLevelAdjustmentEffect {
    const IID: ::windows::core::GUID = <IWhiteLevelAdjustmentEffect as ::windows::core::Interface>::IID;
}
impl ::windows::core::RuntimeName for WhiteLevelAdjustmentEffect {
    const NAME: &'static str = "Microsoft.Graphics.Canvas.Effects.WhiteLevelAdjustmentEffect";
}
::windows::core::interface_hierarchy!(
    WhiteLevelAdjustmentEffect,::windows::core::IUnknown,::windows::core::IInspectable
);
impl ::core::convert::TryFrom<WhiteLevelAdjustmentEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect> for ICanvasEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::core::InParam<ICanvasEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
impl ::core::convert::TryFrom<WhiteLevelAdjustmentEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect> for super::ICanvasImage {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::core::InParam<super::ICanvasImage> {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<WhiteLevelAdjustmentEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::Foundation::IClosable {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Foundation")]
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::core::InParam<::windows::Foundation::IClosable> {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<WhiteLevelAdjustmentEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::Graphics::Effects::IGraphicsEffect {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffect> {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<WhiteLevelAdjustmentEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::core::convert::TryFrom::try_from(&value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::Graphics::Effects::IGraphicsEffectSource {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        ::windows::core::Interface::cast(value)
    }
}
#[cfg(feature = "Graphics_Effects")]
impl ::core::convert::TryFrom<&WhiteLevelAdjustmentEffect>
for ::windows::core::InParam<::windows::Graphics::Effects::IGraphicsEffectSource> {
    type Error = ::windows::core::Error;
    fn try_from(value: &WhiteLevelAdjustmentEffect) -> ::windows::core::Result<Self> {
        let item = ::std::convert::TryInto::try_into(value)?;
        Ok(::windows::core::InParam::owned(item))
    }
}
unsafe impl ::core::marker::Send for WhiteLevelAdjustmentEffect {}
unsafe impl ::core::marker::Sync for WhiteLevelAdjustmentEffect {}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct BlendEffectMode(pub i32);
impl BlendEffectMode {
    pub const Multiply: Self = Self(0i32);
    pub const Screen: Self = Self(1i32);
    pub const Darken: Self = Self(2i32);
    pub const Lighten: Self = Self(3i32);
    pub const Dissolve: Self = Self(4i32);
    pub const ColorBurn: Self = Self(5i32);
    pub const LinearBurn: Self = Self(6i32);
    pub const DarkerColor: Self = Self(7i32);
    pub const LighterColor: Self = Self(8i32);
    pub const ColorDodge: Self = Self(9i32);
    pub const LinearDodge: Self = Self(10i32);
    pub const Overlay: Self = Self(11i32);
    pub const SoftLight: Self = Self(12i32);
    pub const HardLight: Self = Self(13i32);
    pub const VividLight: Self = Self(14i32);
    pub const LinearLight: Self = Self(15i32);
    pub const PinLight: Self = Self(16i32);
    pub const HardMix: Self = Self(17i32);
    pub const Difference: Self = Self(18i32);
    pub const Exclusion: Self = Self(19i32);
    pub const Hue: Self = Self(20i32);
    pub const Saturation: Self = Self(21i32);
    pub const Color: Self = Self(22i32);
    pub const Luminosity: Self = Self(23i32);
    pub const Subtract: Self = Self(24i32);
    pub const Division: Self = Self(25i32);
}
impl ::core::marker::Copy for BlendEffectMode {}
impl ::core::clone::Clone for BlendEffectMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for BlendEffectMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for BlendEffectMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for BlendEffectMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("BlendEffectMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for BlendEffectMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.BlendEffectMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorManagementEffectQuality(pub i32);
impl ColorManagementEffectQuality {
    pub const Proof: Self = Self(0i32);
    pub const Normal: Self = Self(1i32);
    pub const Best: Self = Self(2i32);
}
impl ::core::marker::Copy for ColorManagementEffectQuality {}
impl ::core::clone::Clone for ColorManagementEffectQuality {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorManagementEffectQuality {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ColorManagementEffectQuality {
    type Abi = Self;
}
impl ::core::fmt::Debug for ColorManagementEffectQuality {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorManagementEffectQuality").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorManagementEffectQuality {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.ColorManagementEffectQuality;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorManagementGamma(pub i32);
impl ColorManagementGamma {
    pub const G22: Self = Self(0i32);
    pub const G10: Self = Self(1i32);
    pub const G2084: Self = Self(2i32);
}
impl ::core::marker::Copy for ColorManagementGamma {}
impl ::core::clone::Clone for ColorManagementGamma {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorManagementGamma {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ColorManagementGamma {
    type Abi = Self;
}
impl ::core::fmt::Debug for ColorManagementGamma {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorManagementGamma").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorManagementGamma {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.ColorManagementGamma;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorManagementProfileType(pub i32);
impl ColorManagementProfileType {
    pub const Icc: Self = Self(0i32);
    pub const Simple: Self = Self(1i32);
    pub const Extended: Self = Self(2i32);
}
impl ::core::marker::Copy for ColorManagementProfileType {}
impl ::core::clone::Clone for ColorManagementProfileType {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorManagementProfileType {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ColorManagementProfileType {
    type Abi = Self;
}
impl ::core::fmt::Debug for ColorManagementProfileType {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorManagementProfileType").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorManagementProfileType {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.ColorManagementProfileType;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ColorManagementRenderingIntent(pub i32);
impl ColorManagementRenderingIntent {
    pub const Perceptual: Self = Self(0i32);
    pub const RelativeColorimetric: Self = Self(1i32);
    pub const Saturation: Self = Self(2i32);
    pub const AbsoluteColorimetric: Self = Self(3i32);
}
impl ::core::marker::Copy for ColorManagementRenderingIntent {}
impl ::core::clone::Clone for ColorManagementRenderingIntent {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ColorManagementRenderingIntent {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ColorManagementRenderingIntent {
    type Abi = Self;
}
impl ::core::fmt::Debug for ColorManagementRenderingIntent {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ColorManagementRenderingIntent").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ColorManagementRenderingIntent {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.ColorManagementRenderingIntent;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EdgeDetectionEffectMode(pub i32);
impl EdgeDetectionEffectMode {
    pub const Sobel: Self = Self(0i32);
    pub const Prewitt: Self = Self(1i32);
}
impl ::core::marker::Copy for EdgeDetectionEffectMode {}
impl ::core::clone::Clone for EdgeDetectionEffectMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EdgeDetectionEffectMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for EdgeDetectionEffectMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for EdgeDetectionEffectMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EdgeDetectionEffectMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EdgeDetectionEffectMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffectMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EffectBorderMode(pub i32);
impl EffectBorderMode {
    pub const Soft: Self = Self(0i32);
    pub const Hard: Self = Self(1i32);
}
impl ::core::marker::Copy for EffectBorderMode {}
impl ::core::clone::Clone for EffectBorderMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EffectBorderMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for EffectBorderMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for EffectBorderMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EffectBorderMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EffectBorderMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.EffectBorderMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EffectChannelSelect(pub i32);
impl EffectChannelSelect {
    pub const Red: Self = Self(0i32);
    pub const Green: Self = Self(1i32);
    pub const Blue: Self = Self(2i32);
    pub const Alpha: Self = Self(3i32);
}
impl ::core::marker::Copy for EffectChannelSelect {}
impl ::core::clone::Clone for EffectChannelSelect {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EffectChannelSelect {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for EffectChannelSelect {
    type Abi = Self;
}
impl ::core::fmt::Debug for EffectChannelSelect {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EffectChannelSelect").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EffectChannelSelect {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.EffectChannelSelect;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EffectHueColorSpace(pub i32);
impl EffectHueColorSpace {
    pub const Hsv: Self = Self(0i32);
    pub const Hsl: Self = Self(1i32);
}
impl ::core::marker::Copy for EffectHueColorSpace {}
impl ::core::clone::Clone for EffectHueColorSpace {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EffectHueColorSpace {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for EffectHueColorSpace {
    type Abi = Self;
}
impl ::core::fmt::Debug for EffectHueColorSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EffectHueColorSpace").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EffectHueColorSpace {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.EffectHueColorSpace;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct EffectOptimization(pub i32);
impl EffectOptimization {
    pub const Speed: Self = Self(0i32);
    pub const Balanced: Self = Self(1i32);
    pub const Quality: Self = Self(2i32);
}
impl ::core::marker::Copy for EffectOptimization {}
impl ::core::clone::Clone for EffectOptimization {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for EffectOptimization {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for EffectOptimization {
    type Abi = Self;
}
impl ::core::fmt::Debug for EffectOptimization {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("EffectOptimization").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for EffectOptimization {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.EffectOptimization;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct ExtendedColorSpace(pub i32);
impl ExtendedColorSpace {
    pub const FullG22P709: Self = Self(0i32);
    pub const FullG10P709: Self = Self(1i32);
    pub const StudioG22P709: Self = Self(2i32);
    pub const StudioG22P2020: Self = Self(3i32);
    pub const FullG2084P2020: Self = Self(12i32);
    pub const StudioG2084P2020: Self = Self(14i32);
    pub const FullG22P2020: Self = Self(17i32);
    pub const Custom: Self = Self(-1i32);
}
impl ::core::marker::Copy for ExtendedColorSpace {}
impl ::core::clone::Clone for ExtendedColorSpace {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for ExtendedColorSpace {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for ExtendedColorSpace {
    type Abi = Self;
}
impl ::core::fmt::Debug for ExtendedColorSpace {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ExtendedColorSpace").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for ExtendedColorSpace {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.ExtendedColorSpace;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct HdrToneMapEffectDisplayMode(pub i32);
impl HdrToneMapEffectDisplayMode {
    pub const Sdr: Self = Self(0i32);
    pub const Hdr: Self = Self(1i32);
}
impl ::core::marker::Copy for HdrToneMapEffectDisplayMode {}
impl ::core::clone::Clone for HdrToneMapEffectDisplayMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for HdrToneMapEffectDisplayMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for HdrToneMapEffectDisplayMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for HdrToneMapEffectDisplayMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("HdrToneMapEffectDisplayMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for HdrToneMapEffectDisplayMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.HdrToneMapEffectDisplayMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct MorphologyEffectMode(pub i32);
impl MorphologyEffectMode {
    pub const Erode: Self = Self(0i32);
    pub const Dilate: Self = Self(1i32);
}
impl ::core::marker::Copy for MorphologyEffectMode {}
impl ::core::clone::Clone for MorphologyEffectMode {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for MorphologyEffectMode {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for MorphologyEffectMode {
    type Abi = Self;
}
impl ::core::fmt::Debug for MorphologyEffectMode {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("MorphologyEffectMode").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for MorphologyEffectMode {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.MorphologyEffectMode;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct SamplerCoordinateMapping(pub i32);
impl SamplerCoordinateMapping {
    pub const Unknown: Self = Self(0i32);
    pub const OneToOne: Self = Self(1i32);
    pub const Offset: Self = Self(2i32);
}
impl ::core::marker::Copy for SamplerCoordinateMapping {}
impl ::core::clone::Clone for SamplerCoordinateMapping {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for SamplerCoordinateMapping {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for SamplerCoordinateMapping {
    type Abi = Self;
}
impl ::core::fmt::Debug for SamplerCoordinateMapping {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("SamplerCoordinateMapping").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for SamplerCoordinateMapping {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.SamplerCoordinateMapping;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
///*Required features: `"Graphics_Canvas_Effects"`*
#[repr(transparent)]
#[derive(::core::cmp::PartialEq, ::core::cmp::Eq)]
pub struct TurbulenceEffectNoise(pub i32);
impl TurbulenceEffectNoise {
    pub const FractalSum: Self = Self(0i32);
    pub const Turbulence: Self = Self(1i32);
}
impl ::core::marker::Copy for TurbulenceEffectNoise {}
impl ::core::clone::Clone for TurbulenceEffectNoise {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for TurbulenceEffectNoise {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for TurbulenceEffectNoise {
    type Abi = Self;
}
impl ::core::fmt::Debug for TurbulenceEffectNoise {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("TurbulenceEffectNoise").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::RuntimeType for TurbulenceEffectNoise {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"enum(Microsoft.Graphics.Canvas.Effects.TurbulenceEffectNoise;i4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[repr(C)]
///*Required features: `"Graphics_Canvas_Effects"`, `"Foundation_Numerics"`*
#[cfg(feature = "Foundation_Numerics")]
pub struct ColorManagementSimpleProfile {
    pub RedPrimary: ::windows::Foundation::Numerics::Vector2,
    pub GreenPrimary: ::windows::Foundation::Numerics::Vector2,
    pub BluePrimary: ::windows::Foundation::Numerics::Vector2,
    pub WhitePointXZ: ::windows::Foundation::Numerics::Vector2,
    pub Gamma: ColorManagementGamma,
}
#[cfg(feature = "Foundation_Numerics")]
impl ::core::marker::Copy for ColorManagementSimpleProfile {}
#[cfg(feature = "Foundation_Numerics")]
impl ::core::clone::Clone for ColorManagementSimpleProfile {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Foundation_Numerics")]
impl ::core::fmt::Debug for ColorManagementSimpleProfile {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("ColorManagementSimpleProfile")
            .field("RedPrimary", &self.RedPrimary)
            .field("GreenPrimary", &self.GreenPrimary)
            .field("BluePrimary", &self.BluePrimary)
            .field("WhitePointXZ", &self.WhitePointXZ)
            .field("Gamma", &self.Gamma)
            .finish()
    }
}
#[cfg(feature = "Foundation_Numerics")]
unsafe impl ::windows::core::Abi for ColorManagementSimpleProfile {
    type Abi = Self;
}
#[cfg(feature = "Foundation_Numerics")]
unsafe impl ::windows::core::RuntimeType for ColorManagementSimpleProfile {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"struct(Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile;struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);struct(Windows.Foundation.Numerics.Vector2;f4;f4);enum(Microsoft.Graphics.Canvas.Effects.ColorManagementGamma;i4))",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
#[cfg(feature = "Foundation_Numerics")]
impl ::core::cmp::PartialEq for ColorManagementSimpleProfile {
    fn eq(&self, other: &Self) -> bool {
        self.RedPrimary == other.RedPrimary && self.GreenPrimary == other.GreenPrimary
            && self.BluePrimary == other.BluePrimary
            && self.WhitePointXZ == other.WhitePointXZ && self.Gamma == other.Gamma
    }
}
#[cfg(feature = "Foundation_Numerics")]
impl ::core::cmp::Eq for ColorManagementSimpleProfile {}
#[cfg(feature = "Foundation_Numerics")]
impl ::core::default::Default for ColorManagementSimpleProfile {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(C)]
///*Required features: `"Graphics_Canvas_Effects"`*
pub struct Matrix5x4 {
    pub M11: f32,
    pub M12: f32,
    pub M13: f32,
    pub M14: f32,
    pub M21: f32,
    pub M22: f32,
    pub M23: f32,
    pub M24: f32,
    pub M31: f32,
    pub M32: f32,
    pub M33: f32,
    pub M34: f32,
    pub M41: f32,
    pub M42: f32,
    pub M43: f32,
    pub M44: f32,
    pub M51: f32,
    pub M52: f32,
    pub M53: f32,
    pub M54: f32,
}
impl ::core::marker::Copy for Matrix5x4 {}
impl ::core::clone::Clone for Matrix5x4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for Matrix5x4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Matrix5x4")
            .field("M11", &self.M11)
            .field("M12", &self.M12)
            .field("M13", &self.M13)
            .field("M14", &self.M14)
            .field("M21", &self.M21)
            .field("M22", &self.M22)
            .field("M23", &self.M23)
            .field("M24", &self.M24)
            .field("M31", &self.M31)
            .field("M32", &self.M32)
            .field("M33", &self.M33)
            .field("M34", &self.M34)
            .field("M41", &self.M41)
            .field("M42", &self.M42)
            .field("M43", &self.M43)
            .field("M44", &self.M44)
            .field("M51", &self.M51)
            .field("M52", &self.M52)
            .field("M53", &self.M53)
            .field("M54", &self.M54)
            .finish()
    }
}
unsafe impl ::windows::core::Abi for Matrix5x4 {
    type Abi = Self;
}
unsafe impl ::windows::core::RuntimeType for Matrix5x4 {
    const SIGNATURE: ::windows::core::ConstBuffer = ::windows::core::ConstBuffer::from_slice(
        b"struct(Microsoft.Graphics.Canvas.Effects.Matrix5x4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4;f4)",
    );
    type DefaultType = Self;
    fn from_default(from: &Self::DefaultType) -> ::windows::core::Result<Self> {
        Ok(*from)
    }
}
impl ::core::cmp::PartialEq for Matrix5x4 {
    fn eq(&self, other: &Self) -> bool {
        self.M11 == other.M11 && self.M12 == other.M12 && self.M13 == other.M13
            && self.M14 == other.M14 && self.M21 == other.M21 && self.M22 == other.M22
            && self.M23 == other.M23 && self.M24 == other.M24 && self.M31 == other.M31
            && self.M32 == other.M32 && self.M33 == other.M33 && self.M34 == other.M34
            && self.M41 == other.M41 && self.M42 == other.M42 && self.M43 == other.M43
            && self.M44 == other.M44 && self.M51 == other.M51 && self.M52 == other.M52
            && self.M53 == other.M53 && self.M54 == other.M54
    }
}
impl ::core::cmp::Eq for Matrix5x4 {}
impl ::core::default::Default for Matrix5x4 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[cfg(feature = "implement")]
::core::include!("impl.rs");
